
clock_project.elf:     file format elf32-littlenios2
clock_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000850 memsz 0x00000850 flags r-x
    LOAD off    0x00001870 vaddr 0x00004870 paddr 0x00004878 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001880 vaddr 0x00004880 paddr 0x00004880 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00001878  2**0
                  CONTENTS
  2 .text         00000838  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00004858  00004858  00001858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00004870  00004878  00001870  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00004880  00004880  00001880  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  0000488c  0000488c  00001878  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001d0  00000000  00000000  000018a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001765  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a0b  00000000  00000000  000031d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000a60  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000348  00000000  00000000  00004640  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000887  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dd1  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00005fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00006020  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000070ae  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000070b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000070b6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000070b7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000070c9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000010  00000000  00000000  000070d2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  000070e2  2**0
                  CONTENTS, READONLY
 26 .jdi          00003e2c  00000000  00000000  00007105  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050322  00000000  00000000  0000af31  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00004858 l    d  .rodata	00000000 .rodata
00004870 l    d  .rwdata	00000000 .rwdata
00004880 l    d  .bss	00000000 .bss
0000488c l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../clock_project_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00004770 g     F .text	0000002c alt_main
00004878 g       *ABS*	00000000 __flash_rwdata_start
0000479c g     F .text	00000038 alt_putstr
00004874 g     O .rwdata	00000004 jtag_uart
00004834 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
000042b8 g     F .text	0000005c blinker
00004020 g       *ABS*	00000000 __flash_exceptions_start
000043fc g     F .text	00000008 WriteNios
00004884 g     O .bss	00000004 alt_argv
0000c870 g       *ABS*	00000000 _gp
000040a4 g     F .text	0000009c SetSegment
00004188 g     F .text	00000048 SetMinute
00004524 g     F .text	00000064 .hidden __udivsi3
00004000 g       *ABS*	00000000 __alt_mem_ram
000041d0 g     F .text	00000048 SetSecond
0000488c g       *ABS*	00000000 __bss_end
0000482c g     F .text	00000004 alt_dcache_flush_all
00004314 g     F .text	000000b0 Timer
00004878 g       *ABS*	00000000 __ram_rwdata_end
00004870 g       *ABS*	00000000 __ram_rodata_end
00004588 g     F .text	00000058 .hidden __umodsi3
0000408c g     F .text	00000018 SetNullSecond
0000488c g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000047f8 g     F .text	00000034 altera_avalon_jtag_uart_write
00004020 g     F .text	0000003c _start
000047f4 g     F .text	00000004 alt_sys_init
000045e0 g     F .text	00000028 .hidden __mulsi3
00004870 g       *ABS*	00000000 __ram_rwdata_start
00004858 g       *ABS*	00000000 __ram_rodata_start
0000405c g     F .text	00000018 SetNullHour
00004608 g     F .text	00000088 alt_busy_sleep
0000488c g       *ABS*	00000000 __alt_stack_base
00004870 g     O .rwdata	00000004 cont
00004880 g       *ABS*	00000000 __bss_start
00004404 g     F .text	00000028 main
00004880 g     O .bss	00000004 alt_envp
00004218 g     F .text	000000a0 Clock
0000442c g     F .text	00000084 .hidden __divsi3
00004858 g       *ABS*	00000000 __flash_rodata_start
000047d4 g     F .text	00000020 alt_irq_init
00004888 g     O .bss	00000004 alt_argc
000043c4 g     F .text	00000038 ClearClock
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004878 g       *ABS*	00000000 _edata
0000488c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000044b0 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004140 g     F .text	00000048 SetHour
0000483c g     F .text	0000001c strlen
00004830 g     F .text	00000004 alt_icache_flush_all
00004074 g     F .text	00000018 SetNullMinute
00004690 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b21c14 	ori	gp,gp,51312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10922014 	ori	r2,r2,18560

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d22314 	ori	r3,r3,18572

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00046900 	call	4690 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00047700 	call	4770 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <SetNullHour>:
	WriteNios(SEG5_BASE, 255);
	WriteNios(SEG6_BASE, 255);
}

void WriteNios(int segm_base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(segm_base, value);
    405c:	00803fc4 	movi	r2,255
    4060:	00e01014 	movui	r3,32832
    4064:	18800035 	stwio	r2,0(r3)
    4068:	00e01414 	movui	r3,32848
    406c:	18800035 	stwio	r2,0(r3)
    4070:	f800283a 	ret

00004074 <SetNullMinute>:
    4074:	00803fc4 	movi	r2,255
    4078:	00e00814 	movui	r3,32800
    407c:	18800035 	stwio	r2,0(r3)
    4080:	00e00c14 	movui	r3,32816
    4084:	18800035 	stwio	r2,0(r3)
    4088:	f800283a 	ret

0000408c <SetNullSecond>:
    408c:	00803fc4 	movi	r2,255
    4090:	00e00014 	movui	r3,32768
    4094:	18800035 	stwio	r2,0(r3)
    4098:	00e00414 	movui	r3,32784
    409c:	18800035 	stwio	r2,0(r3)
    40a0:	f800283a 	ret

000040a4 <SetSegment>:
	SetSegment(SEG2_BASE, sec_1);
}

void SetSegment(int base, int value)
{
	switch (value)
    40a4:	00800244 	movi	r2,9
    40a8:	11402436 	bltu	r2,r5,413c <SetSegment+0x98>
    40ac:	280a90ba 	slli	r5,r5,2
    40b0:	00800034 	movhi	r2,0
    40b4:	10903104 	addi	r2,r2,16580
    40b8:	288b883a 	add	r5,r5,r2
    40bc:	28800017 	ldw	r2,0(r5)
    40c0:	1000683a 	jmp	r2
    40c4:	00004134 	movhi	zero,260
    40c8:	000040ec 	andhi	zero,zero,259
    40cc:	000040f4 	movhi	zero,259
    40d0:	000040fc 	xorhi	zero,zero,259
    40d4:	00004104 	movi	zero,260
    40d8:	0000410c 	andi	zero,zero,260
    40dc:	00004114 	movui	zero,260
    40e0:	0000411c 	xori	zero,zero,260
    40e4:	00004124 	muli	zero,zero,260
    40e8:	0000412c 	andhi	zero,zero,260
	WriteNios(SEG5_BASE, 255);
	WriteNios(SEG6_BASE, 255);
}

void WriteNios(int segm_base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(segm_base, value);
    40ec:	00801e44 	movi	r2,121
    40f0:	00001106 	br	4138 <SetSegment+0x94>
    40f4:	00800904 	movi	r2,36
    40f8:	00000f06 	br	4138 <SetSegment+0x94>
    40fc:	00800c04 	movi	r2,48
    4100:	00000d06 	br	4138 <SetSegment+0x94>
    4104:	00800644 	movi	r2,25
    4108:	00000b06 	br	4138 <SetSegment+0x94>
    410c:	00800484 	movi	r2,18
    4110:	00000906 	br	4138 <SetSegment+0x94>
    4114:	00800084 	movi	r2,2
    4118:	00000706 	br	4138 <SetSegment+0x94>
    411c:	00801e04 	movi	r2,120
    4120:	00000506 	br	4138 <SetSegment+0x94>
    4124:	20000035 	stwio	zero,0(r4)
    4128:	f800283a 	ret
    412c:	00800604 	movi	r2,24
    4130:	00000106 	br	4138 <SetSegment+0x94>
    4134:	00801004 	movi	r2,64
    4138:	20800035 	stwio	r2,0(r4)
    413c:	f800283a 	ret

00004140 <SetHour>:

	}
}

void SetHour(int hour)
{
    4140:	defffe04 	addi	sp,sp,-8
	int hour_0 = hour % 10;
	int hour_1 = hour / 10;
	SetSegment(SEG5_BASE, hour_0);
    4144:	01400284 	movi	r5,10

	}
}

void SetHour(int hour)
{
    4148:	dfc00115 	stw	ra,4(sp)
    414c:	dc000015 	stw	r16,0(sp)
    4150:	2021883a 	mov	r16,r4
	int hour_0 = hour % 10;
	int hour_1 = hour / 10;
	SetSegment(SEG5_BASE, hour_0);
    4154:	00044b00 	call	44b0 <__modsi3>
    4158:	100b883a 	mov	r5,r2
    415c:	01201014 	movui	r4,32832
    4160:	00040a40 	call	40a4 <SetSegment>
	SetSegment(SEG6_BASE, hour_1);
    4164:	8009883a 	mov	r4,r16
    4168:	01400284 	movi	r5,10
    416c:	000442c0 	call	442c <__divsi3>
    4170:	100b883a 	mov	r5,r2
    4174:	01201414 	movui	r4,32848
}
    4178:	dfc00117 	ldw	ra,4(sp)
    417c:	dc000017 	ldw	r16,0(sp)
    4180:	dec00204 	addi	sp,sp,8
void SetHour(int hour)
{
	int hour_0 = hour % 10;
	int hour_1 = hour / 10;
	SetSegment(SEG5_BASE, hour_0);
	SetSegment(SEG6_BASE, hour_1);
    4184:	00040a41 	jmpi	40a4 <SetSegment>

00004188 <SetMinute>:
}

void SetMinute(int minute)
{
    4188:	defffe04 	addi	sp,sp,-8
	int min_0 = minute % 10;
	int min_1 = minute / 10;
	SetSegment(SEG3_BASE, min_0);
    418c:	01400284 	movi	r5,10
	SetSegment(SEG5_BASE, hour_0);
	SetSegment(SEG6_BASE, hour_1);
}

void SetMinute(int minute)
{
    4190:	dfc00115 	stw	ra,4(sp)
    4194:	dc000015 	stw	r16,0(sp)
    4198:	2021883a 	mov	r16,r4
	int min_0 = minute % 10;
	int min_1 = minute / 10;
	SetSegment(SEG3_BASE, min_0);
    419c:	00044b00 	call	44b0 <__modsi3>
    41a0:	100b883a 	mov	r5,r2
    41a4:	01200814 	movui	r4,32800
    41a8:	00040a40 	call	40a4 <SetSegment>
	SetSegment(SEG4_BASE, min_1);
    41ac:	8009883a 	mov	r4,r16
    41b0:	01400284 	movi	r5,10
    41b4:	000442c0 	call	442c <__divsi3>
    41b8:	100b883a 	mov	r5,r2
    41bc:	01200c14 	movui	r4,32816
}
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	dc000017 	ldw	r16,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
void SetMinute(int minute)
{
	int min_0 = minute % 10;
	int min_1 = minute / 10;
	SetSegment(SEG3_BASE, min_0);
	SetSegment(SEG4_BASE, min_1);
    41cc:	00040a41 	jmpi	40a4 <SetSegment>

000041d0 <SetSecond>:
}

void SetSecond(int second)
{
    41d0:	defffe04 	addi	sp,sp,-8
	int sec_0 = second % 10;
	int sec_1 = second / 10;
	SetSegment(SEG1_BASE, sec_0);
    41d4:	01400284 	movi	r5,10
	SetSegment(SEG3_BASE, min_0);
	SetSegment(SEG4_BASE, min_1);
}

void SetSecond(int second)
{
    41d8:	dfc00115 	stw	ra,4(sp)
    41dc:	dc000015 	stw	r16,0(sp)
    41e0:	2021883a 	mov	r16,r4
	int sec_0 = second % 10;
	int sec_1 = second / 10;
	SetSegment(SEG1_BASE, sec_0);
    41e4:	00044b00 	call	44b0 <__modsi3>
    41e8:	100b883a 	mov	r5,r2
    41ec:	01200014 	movui	r4,32768
    41f0:	00040a40 	call	40a4 <SetSegment>
	SetSegment(SEG2_BASE, sec_1);
    41f4:	8009883a 	mov	r4,r16
    41f8:	01400284 	movi	r5,10
    41fc:	000442c0 	call	442c <__divsi3>
    4200:	100b883a 	mov	r5,r2
    4204:	01200414 	movui	r4,32784
}
    4208:	dfc00117 	ldw	ra,4(sp)
    420c:	dc000017 	ldw	r16,0(sp)
    4210:	dec00204 	addi	sp,sp,8
void SetSecond(int second)
{
	int sec_0 = second % 10;
	int sec_1 = second / 10;
	SetSegment(SEG1_BASE, sec_0);
	SetSegment(SEG2_BASE, sec_1);
    4214:	00040a41 	jmpi	40a4 <SetSegment>

00004218 <Clock>:
	WriteNios(SEG1_BASE, 255);
	WriteNios(SEG2_BASE, 255);
}

void Clock()
{
    4218:	defffb04 	addi	sp,sp,-20
    421c:	dcc00315 	stw	r19,12(sp)
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
    4220:	04c00074 	movhi	r19,1
	WriteNios(SEG1_BASE, 255);
	WriteNios(SEG2_BASE, 255);
}

void Clock()
{
    4224:	dfc00415 	stw	ra,16(sp)
    4228:	dc800215 	stw	r18,8(sp)
    422c:	dc400115 	stw	r17,4(sp)
    4230:	dc000015 	stw	r16,0(sp)
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
    4234:	9cd46004 	addi	r19,r19,20864

	int seg = 0;
	int min = 0;
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
    4238:	010003f4 	movhi	r4,15
    423c:	21109004 	addi	r4,r4,16960
    4240:	00046080 	call	4608 <alt_busy_sleep>
		if (cont == 86400)
    4244:	d0a00017 	ldw	r2,-32768(gp)
    4248:	14c0011e 	bne	r2,r19,4250 <Clock+0x38>
			cont = 0;
    424c:	d0200015 	stw	zero,-32768(gp)
		hora = cont / 3600;
    4250:	d4200017 	ldw	r16,-32768(gp)
    4254:	01438404 	movi	r5,3600
    4258:	8009883a 	mov	r4,r16
    425c:	000442c0 	call	442c <__divsi3>
		min = (cont / 60) - (hora * 60);
    4260:	01400f04 	movi	r5,60
    4264:	8009883a 	mov	r4,r16
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
			cont = 0;
		hora = cont / 3600;
    4268:	1025883a 	mov	r18,r2
		min = (cont / 60) - (hora * 60);
    426c:	000442c0 	call	442c <__divsi3>
    4270:	017ff104 	movi	r5,-60
    4274:	9009883a 	mov	r4,r18
    4278:	1023883a 	mov	r17,r2
    427c:	00045e00 	call	45e0 <__mulsi3>
		seg = cont % 60;
		SetHour(hora);
    4280:	9009883a 	mov	r4,r18
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
			cont = 0;
		hora = cont / 3600;
		min = (cont / 60) - (hora * 60);
    4284:	88a3883a 	add	r17,r17,r2
		seg = cont % 60;
		SetHour(hora);
    4288:	00041400 	call	4140 <SetHour>
		SetMinute(min);
    428c:	8809883a 	mov	r4,r17
    4290:	00041880 	call	4188 <SetMinute>
		SetSecond(seg);
    4294:	01400f04 	movi	r5,60
    4298:	8009883a 	mov	r4,r16
    429c:	00044b00 	call	44b0 <__modsi3>
    42a0:	1009883a 	mov	r4,r2
    42a4:	00041d00 	call	41d0 <SetSecond>
		cont = cont + 1;
    42a8:	d0a00017 	ldw	r2,-32768(gp)
    42ac:	10800044 	addi	r2,r2,1
    42b0:	d0a00015 	stw	r2,-32768(gp)

	}
    42b4:	003fe006 	br	4238 <Clock+0x20>

000042b8 <blinker>:

	blinker(5);
}

void blinker(int secs)
{
    42b8:	defffe04 	addi	sp,sp,-8
    42bc:	dc000015 	stw	r16,0(sp)
    42c0:	dfc00115 	stw	ra,4(sp)
    42c4:	2021883a 	mov	r16,r4
	int temp=secs;

	while(temp>=0)
    42c8:	80001116 	blt	r16,zero,4310 <blinker+0x58>
	{
		SetHour(0);
    42cc:	0009883a 	mov	r4,zero
    42d0:	00041400 	call	4140 <SetHour>
		SetMinute(0);
    42d4:	0009883a 	mov	r4,zero
    42d8:	00041880 	call	4188 <SetMinute>
		SetSecond(0);
    42dc:	0009883a 	mov	r4,zero
    42e0:	00041d00 	call	41d0 <SetSecond>
		alt_busy_sleep(SECOND/2);
    42e4:	01000234 	movhi	r4,8
    42e8:	21284804 	addi	r4,r4,-24288
    42ec:	00046080 	call	4608 <alt_busy_sleep>
		SetNullHour();
    42f0:	000405c0 	call	405c <SetNullHour>
		SetNullMinute();
    42f4:	00040740 	call	4074 <SetNullMinute>
		SetNullSecond();
    42f8:	000408c0 	call	408c <SetNullSecond>
		alt_busy_sleep(SECOND/2);
    42fc:	01000234 	movhi	r4,8
    4300:	21284804 	addi	r4,r4,-24288
    4304:	00046080 	call	4608 <alt_busy_sleep>
		temp=temp-1;
    4308:	843fffc4 	addi	r16,r16,-1
    430c:	003fee06 	br	42c8 <blinker+0x10>
	}
	Clock();
    4310:	00042180 	call	4218 <Clock>

00004314 <Timer>:
	Timer(0, 0, 15);
	return 0;
}

void Timer(int hour, int minute, int sec)
{
    4314:	defffc04 	addi	sp,sp,-16
    4318:	dc800215 	stw	r18,8(sp)
    431c:	2825883a 	mov	r18,r5
	int cont  = hour * 3600 + minute * 60 + sec;
    4320:	01438404 	movi	r5,3600
	Timer(0, 0, 15);
	return 0;
}

void Timer(int hour, int minute, int sec)
{
    4324:	dfc00315 	stw	ra,12(sp)
    4328:	dc400115 	stw	r17,4(sp)
    432c:	dc000015 	stw	r16,0(sp)
    4330:	3023883a 	mov	r17,r6
	int cont  = hour * 3600 + minute * 60 + sec;
    4334:	00045e00 	call	45e0 <__mulsi3>
    4338:	01400f04 	movi	r5,60
    433c:	9009883a 	mov	r4,r18
    4340:	1021883a 	mov	r16,r2
    4344:	00045e00 	call	45e0 <__mulsi3>
    4348:	8085883a 	add	r2,r16,r2
    434c:	1461883a 	add	r16,r2,r17
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (cont >= 0){
    4350:	80001a16 	blt	r16,zero,43bc <Timer+0xa8>
		alt_busy_sleep(SECOND);
    4354:	010003f4 	movhi	r4,15
    4358:	21109004 	addi	r4,r4,16960
    435c:	00046080 	call	4608 <alt_busy_sleep>
		hora = cont / 3600;
    4360:	8009883a 	mov	r4,r16
    4364:	01438404 	movi	r5,3600
    4368:	000442c0 	call	442c <__divsi3>
		min = (cont / 60) - (hora * 60);
    436c:	8009883a 	mov	r4,r16
    4370:	01400f04 	movi	r5,60
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (cont >= 0){
		alt_busy_sleep(SECOND);
		hora = cont / 3600;
    4374:	1025883a 	mov	r18,r2
		min = (cont / 60) - (hora * 60);
    4378:	000442c0 	call	442c <__divsi3>
    437c:	017ff104 	movi	r5,-60
    4380:	9009883a 	mov	r4,r18
    4384:	1023883a 	mov	r17,r2
    4388:	00045e00 	call	45e0 <__mulsi3>
		seg = cont % 60;
		SetHour(hora);
    438c:	9009883a 	mov	r4,r18
	int min = 0;
	int hora = 0;
	while (cont >= 0){
		alt_busy_sleep(SECOND);
		hora = cont / 3600;
		min = (cont / 60) - (hora * 60);
    4390:	88a3883a 	add	r17,r17,r2
		seg = cont % 60;
		SetHour(hora);
    4394:	00041400 	call	4140 <SetHour>
		SetMinute(min);
    4398:	8809883a 	mov	r4,r17
    439c:	00041880 	call	4188 <SetMinute>
		SetSecond(seg);
    43a0:	8009883a 	mov	r4,r16
    43a4:	01400f04 	movi	r5,60
    43a8:	00044b00 	call	44b0 <__modsi3>
    43ac:	1009883a 	mov	r4,r2
    43b0:	00041d00 	call	41d0 <SetSecond>
		cont = cont - 1;
    43b4:	843fffc4 	addi	r16,r16,-1
    43b8:	003fe506 	br	4350 <Timer+0x3c>
	}

	blinker(5);
    43bc:	01000144 	movi	r4,5
    43c0:	00042b80 	call	42b8 <blinker>

000043c4 <ClearClock>:
	WriteNios(SEG5_BASE, 255);
	WriteNios(SEG6_BASE, 255);
}

void WriteNios(int segm_base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(segm_base, value);
    43c4:	00803fc4 	movi	r2,255
    43c8:	00e00014 	movui	r3,32768
    43cc:	18800035 	stwio	r2,0(r3)
    43d0:	00e00414 	movui	r3,32784
    43d4:	18800035 	stwio	r2,0(r3)
    43d8:	00e00814 	movui	r3,32800
    43dc:	18800035 	stwio	r2,0(r3)
    43e0:	00e00c14 	movui	r3,32816
    43e4:	18800035 	stwio	r2,0(r3)
    43e8:	00e01014 	movui	r3,32832
    43ec:	18800035 	stwio	r2,0(r3)
    43f0:	00e01414 	movui	r3,32848
    43f4:	18800035 	stwio	r2,0(r3)
    43f8:	f800283a 	ret

000043fc <WriteNios>:
    43fc:	21400035 	stwio	r5,0(r4)
    4400:	f800283a 	ret

00004404 <main>:

int cont = 86390;

int main()
{
	alt_putstr("Hello from Nios II!\n");
    4404:	01000034 	movhi	r4,0
void blinker(int);

int cont = 86390;

int main()
{
    4408:	deffff04 	addi	sp,sp,-4
	alt_putstr("Hello from Nios II!\n");
    440c:	21121604 	addi	r4,r4,18520
void blinker(int);

int cont = 86390;

int main()
{
    4410:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Hello from Nios II!\n");
    4414:	000479c0 	call	479c <alt_putstr>
	ClearClock();
    4418:	00043c40 	call	43c4 <ClearClock>
	//Clock();
	Timer(0, 0, 15);
    441c:	018003c4 	movi	r6,15
    4420:	000b883a 	mov	r5,zero
    4424:	0009883a 	mov	r4,zero
    4428:	00043140 	call	4314 <Timer>

0000442c <__divsi3>:
    442c:	20001b16 	blt	r4,zero,449c <__divsi3+0x70>
    4430:	000f883a 	mov	r7,zero
    4434:	28001616 	blt	r5,zero,4490 <__divsi3+0x64>
    4438:	200d883a 	mov	r6,r4
    443c:	29001a2e 	bgeu	r5,r4,44a8 <__divsi3+0x7c>
    4440:	00800804 	movi	r2,32
    4444:	00c00044 	movi	r3,1
    4448:	00000106 	br	4450 <__divsi3+0x24>
    444c:	10000d26 	beq	r2,zero,4484 <__divsi3+0x58>
    4450:	294b883a 	add	r5,r5,r5
    4454:	10bfffc4 	addi	r2,r2,-1
    4458:	18c7883a 	add	r3,r3,r3
    445c:	293ffb36 	bltu	r5,r4,444c <__divsi3+0x20>
    4460:	0005883a 	mov	r2,zero
    4464:	18000726 	beq	r3,zero,4484 <__divsi3+0x58>
    4468:	0005883a 	mov	r2,zero
    446c:	31400236 	bltu	r6,r5,4478 <__divsi3+0x4c>
    4470:	314dc83a 	sub	r6,r6,r5
    4474:	10c4b03a 	or	r2,r2,r3
    4478:	1806d07a 	srli	r3,r3,1
    447c:	280ad07a 	srli	r5,r5,1
    4480:	183ffa1e 	bne	r3,zero,446c <__divsi3+0x40>
    4484:	38000126 	beq	r7,zero,448c <__divsi3+0x60>
    4488:	0085c83a 	sub	r2,zero,r2
    448c:	f800283a 	ret
    4490:	014bc83a 	sub	r5,zero,r5
    4494:	39c0005c 	xori	r7,r7,1
    4498:	003fe706 	br	4438 <__divsi3+0xc>
    449c:	0109c83a 	sub	r4,zero,r4
    44a0:	01c00044 	movi	r7,1
    44a4:	003fe306 	br	4434 <__divsi3+0x8>
    44a8:	00c00044 	movi	r3,1
    44ac:	003fee06 	br	4468 <__divsi3+0x3c>

000044b0 <__modsi3>:
    44b0:	20001716 	blt	r4,zero,4510 <__modsi3+0x60>
    44b4:	000f883a 	mov	r7,zero
    44b8:	2005883a 	mov	r2,r4
    44bc:	28001216 	blt	r5,zero,4508 <__modsi3+0x58>
    44c0:	2900162e 	bgeu	r5,r4,451c <__modsi3+0x6c>
    44c4:	01800804 	movi	r6,32
    44c8:	00c00044 	movi	r3,1
    44cc:	00000106 	br	44d4 <__modsi3+0x24>
    44d0:	30000a26 	beq	r6,zero,44fc <__modsi3+0x4c>
    44d4:	294b883a 	add	r5,r5,r5
    44d8:	31bfffc4 	addi	r6,r6,-1
    44dc:	18c7883a 	add	r3,r3,r3
    44e0:	293ffb36 	bltu	r5,r4,44d0 <__modsi3+0x20>
    44e4:	18000526 	beq	r3,zero,44fc <__modsi3+0x4c>
    44e8:	1806d07a 	srli	r3,r3,1
    44ec:	11400136 	bltu	r2,r5,44f4 <__modsi3+0x44>
    44f0:	1145c83a 	sub	r2,r2,r5
    44f4:	280ad07a 	srli	r5,r5,1
    44f8:	183ffb1e 	bne	r3,zero,44e8 <__modsi3+0x38>
    44fc:	38000126 	beq	r7,zero,4504 <__modsi3+0x54>
    4500:	0085c83a 	sub	r2,zero,r2
    4504:	f800283a 	ret
    4508:	014bc83a 	sub	r5,zero,r5
    450c:	003fec06 	br	44c0 <__modsi3+0x10>
    4510:	0109c83a 	sub	r4,zero,r4
    4514:	01c00044 	movi	r7,1
    4518:	003fe706 	br	44b8 <__modsi3+0x8>
    451c:	00c00044 	movi	r3,1
    4520:	003ff106 	br	44e8 <__modsi3+0x38>

00004524 <__udivsi3>:
    4524:	200d883a 	mov	r6,r4
    4528:	2900152e 	bgeu	r5,r4,4580 <__udivsi3+0x5c>
    452c:	28001416 	blt	r5,zero,4580 <__udivsi3+0x5c>
    4530:	00800804 	movi	r2,32
    4534:	00c00044 	movi	r3,1
    4538:	00000206 	br	4544 <__udivsi3+0x20>
    453c:	10000e26 	beq	r2,zero,4578 <__udivsi3+0x54>
    4540:	28000516 	blt	r5,zero,4558 <__udivsi3+0x34>
    4544:	294b883a 	add	r5,r5,r5
    4548:	10bfffc4 	addi	r2,r2,-1
    454c:	18c7883a 	add	r3,r3,r3
    4550:	293ffa36 	bltu	r5,r4,453c <__udivsi3+0x18>
    4554:	18000826 	beq	r3,zero,4578 <__udivsi3+0x54>
    4558:	0005883a 	mov	r2,zero
    455c:	31400236 	bltu	r6,r5,4568 <__udivsi3+0x44>
    4560:	314dc83a 	sub	r6,r6,r5
    4564:	10c4b03a 	or	r2,r2,r3
    4568:	1806d07a 	srli	r3,r3,1
    456c:	280ad07a 	srli	r5,r5,1
    4570:	183ffa1e 	bne	r3,zero,455c <__udivsi3+0x38>
    4574:	f800283a 	ret
    4578:	0005883a 	mov	r2,zero
    457c:	f800283a 	ret
    4580:	00c00044 	movi	r3,1
    4584:	003ff406 	br	4558 <__udivsi3+0x34>

00004588 <__umodsi3>:
    4588:	2005883a 	mov	r2,r4
    458c:	2900122e 	bgeu	r5,r4,45d8 <__umodsi3+0x50>
    4590:	28001116 	blt	r5,zero,45d8 <__umodsi3+0x50>
    4594:	01800804 	movi	r6,32
    4598:	00c00044 	movi	r3,1
    459c:	00000206 	br	45a8 <__umodsi3+0x20>
    45a0:	30000c26 	beq	r6,zero,45d4 <__umodsi3+0x4c>
    45a4:	28000516 	blt	r5,zero,45bc <__umodsi3+0x34>
    45a8:	294b883a 	add	r5,r5,r5
    45ac:	31bfffc4 	addi	r6,r6,-1
    45b0:	18c7883a 	add	r3,r3,r3
    45b4:	293ffa36 	bltu	r5,r4,45a0 <__umodsi3+0x18>
    45b8:	18000626 	beq	r3,zero,45d4 <__umodsi3+0x4c>
    45bc:	1806d07a 	srli	r3,r3,1
    45c0:	11400136 	bltu	r2,r5,45c8 <__umodsi3+0x40>
    45c4:	1145c83a 	sub	r2,r2,r5
    45c8:	280ad07a 	srli	r5,r5,1
    45cc:	183ffb1e 	bne	r3,zero,45bc <__umodsi3+0x34>
    45d0:	f800283a 	ret
    45d4:	f800283a 	ret
    45d8:	00c00044 	movi	r3,1
    45dc:	003ff706 	br	45bc <__umodsi3+0x34>

000045e0 <__mulsi3>:
    45e0:	0005883a 	mov	r2,zero
    45e4:	20000726 	beq	r4,zero,4604 <__mulsi3+0x24>
    45e8:	20c0004c 	andi	r3,r4,1
    45ec:	2008d07a 	srli	r4,r4,1
    45f0:	18000126 	beq	r3,zero,45f8 <__mulsi3+0x18>
    45f4:	1145883a 	add	r2,r2,r5
    45f8:	294b883a 	add	r5,r5,r5
    45fc:	203ffa1e 	bne	r4,zero,45e8 <__mulsi3+0x8>
    4600:	f800283a 	ret
    4604:	f800283a 	ret

00004608 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4608:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    460c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4610:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4614:	dc000015 	stw	r16,0(sp)
    4618:	dfc00115 	stw	ra,4(sp)
    461c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4620:	00045240 	call	4524 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4624:	10001026 	beq	r2,zero,4668 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4628:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    462c:	013999b4 	movhi	r4,58982
    4630:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4634:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4638:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    463c:	297fffc4 	addi	r5,r5,-1
    4640:	283ffe1e 	bne	r5,zero,463c <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4644:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4648:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    464c:	18bffb16 	blt	r3,r2,463c <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4650:	01400144 	movi	r5,5
    4654:	8009883a 	mov	r4,r16
    4658:	00045e00 	call	45e0 <__mulsi3>
    465c:	10bfffc4 	addi	r2,r2,-1
    4660:	103ffe1e 	bne	r2,zero,465c <alt_busy_sleep+0x54>
    4664:	00000506 	br	467c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4668:	01400144 	movi	r5,5
    466c:	8009883a 	mov	r4,r16
    4670:	00045e00 	call	45e0 <__mulsi3>
    4674:	10bfffc4 	addi	r2,r2,-1
    4678:	00bffe16 	blt	zero,r2,4674 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    467c:	0005883a 	mov	r2,zero
    4680:	dfc00117 	ldw	ra,4(sp)
    4684:	dc000017 	ldw	r16,0(sp)
    4688:	dec00204 	addi	sp,sp,8
    468c:	f800283a 	ret

00004690 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4690:	deffff04 	addi	sp,sp,-4
    4694:	01000034 	movhi	r4,0
    4698:	01400034 	movhi	r5,0
    469c:	dfc00015 	stw	ra,0(sp)
    46a0:	21121c04 	addi	r4,r4,18544
    46a4:	29521e04 	addi	r5,r5,18552

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    46a8:	2140061e 	bne	r4,r5,46c4 <alt_load+0x34>
    46ac:	01000034 	movhi	r4,0
    46b0:	01400034 	movhi	r5,0
    46b4:	21100804 	addi	r4,r4,16416
    46b8:	29500804 	addi	r5,r5,16416
    46bc:	2140121e 	bne	r4,r5,4708 <alt_load+0x78>
    46c0:	00000b06 	br	46f0 <alt_load+0x60>
    46c4:	00c00034 	movhi	r3,0
    46c8:	18d21e04 	addi	r3,r3,18552
    46cc:	1907c83a 	sub	r3,r3,r4
    46d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    46d4:	10fff526 	beq	r2,r3,46ac <alt_load+0x1c>
    {
      *to++ = *from++;
    46d8:	114f883a 	add	r7,r2,r5
    46dc:	39c00017 	ldw	r7,0(r7)
    46e0:	110d883a 	add	r6,r2,r4
    46e4:	10800104 	addi	r2,r2,4
    46e8:	31c00015 	stw	r7,0(r6)
    46ec:	003ff906 	br	46d4 <alt_load+0x44>
    46f0:	01000034 	movhi	r4,0
    46f4:	01400034 	movhi	r5,0
    46f8:	21121604 	addi	r4,r4,18520
    46fc:	29521604 	addi	r5,r5,18520

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4700:	2140101e 	bne	r4,r5,4744 <alt_load+0xb4>
    4704:	00000b06 	br	4734 <alt_load+0xa4>
    4708:	00c00034 	movhi	r3,0
    470c:	18d00804 	addi	r3,r3,16416
    4710:	1907c83a 	sub	r3,r3,r4
    4714:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4718:	10fff526 	beq	r2,r3,46f0 <alt_load+0x60>
    {
      *to++ = *from++;
    471c:	114f883a 	add	r7,r2,r5
    4720:	39c00017 	ldw	r7,0(r7)
    4724:	110d883a 	add	r6,r2,r4
    4728:	10800104 	addi	r2,r2,4
    472c:	31c00015 	stw	r7,0(r6)
    4730:	003ff906 	br	4718 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4734:	000482c0 	call	482c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4738:	dfc00017 	ldw	ra,0(sp)
    473c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4740:	00048301 	jmpi	4830 <alt_icache_flush_all>
    4744:	00c00034 	movhi	r3,0
    4748:	18d21c04 	addi	r3,r3,18544
    474c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4750:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4754:	18bff726 	beq	r3,r2,4734 <alt_load+0xa4>
    {
      *to++ = *from++;
    4758:	114f883a 	add	r7,r2,r5
    475c:	39c00017 	ldw	r7,0(r7)
    4760:	110d883a 	add	r6,r2,r4
    4764:	10800104 	addi	r2,r2,4
    4768:	31c00015 	stw	r7,0(r6)
    476c:	003ff906 	br	4754 <alt_load+0xc4>

00004770 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4770:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4774:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4778:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    477c:	00047d40 	call	47d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4780:	00047f40 	call	47f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4784:	d1a00417 	ldw	r6,-32752(gp)
    4788:	d1600517 	ldw	r5,-32748(gp)
    478c:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4790:	dfc00017 	ldw	ra,0(sp)
    4794:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4798:	00044041 	jmpi	4404 <main>

0000479c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    479c:	defffe04 	addi	sp,sp,-8
    47a0:	dc000015 	stw	r16,0(sp)
    47a4:	dfc00115 	stw	ra,4(sp)
    47a8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    47ac:	000483c0 	call	483c <strlen>
    47b0:	01000034 	movhi	r4,0
    47b4:	000f883a 	mov	r7,zero
    47b8:	100d883a 	mov	r6,r2
    47bc:	800b883a 	mov	r5,r16
    47c0:	21121d04 	addi	r4,r4,18548
#else
    return fputs(str, stdout);
#endif
#endif
}
    47c4:	dfc00117 	ldw	ra,4(sp)
    47c8:	dc000017 	ldw	r16,0(sp)
    47cc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    47d0:	00047f81 	jmpi	47f8 <altera_avalon_jtag_uart_write>

000047d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    47d4:	deffff04 	addi	sp,sp,-4
    47d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
    47dc:	00048340 	call	4834 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    47e0:	00800044 	movi	r2,1
    47e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    47e8:	dfc00017 	ldw	ra,0(sp)
    47ec:	dec00104 	addi	sp,sp,4
    47f0:	f800283a 	ret

000047f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    47f4:	f800283a 	ret

000047f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    47f8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    47fc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    4800:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4804:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4808:	2980072e 	bgeu	r5,r6,4828 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    480c:	38c00037 	ldwio	r3,0(r7)
    4810:	18ffffec 	andhi	r3,r3,65535
    4814:	183ffc26 	beq	r3,zero,4808 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4818:	28c00007 	ldb	r3,0(r5)
    481c:	20c00035 	stwio	r3,0(r4)
    4820:	29400044 	addi	r5,r5,1
    4824:	003ff806 	br	4808 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    4828:	f800283a 	ret

0000482c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    482c:	f800283a 	ret

00004830 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4830:	f800283a 	ret

00004834 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4834:	000170fa 	wrctl	ienable,zero
    4838:	f800283a 	ret

0000483c <strlen>:
    483c:	2005883a 	mov	r2,r4
    4840:	10c00007 	ldb	r3,0(r2)
    4844:	18000226 	beq	r3,zero,4850 <strlen+0x14>
    4848:	10800044 	addi	r2,r2,1
    484c:	003ffc06 	br	4840 <strlen+0x4>
    4850:	1105c83a 	sub	r2,r2,r4
    4854:	f800283a 	ret
