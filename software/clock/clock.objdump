
clock.elf:     file format elf32-littlenios2
clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000010e0 memsz 0x000010e0 flags r-x
    LOAD off    0x00002100 vaddr 0x00005100 paddr 0x000051f4 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x000022e8 vaddr 0x000052e8 paddr 0x000052e8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000021f4  2**0
                  CONTENTS
  2 .text         0000107c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  0000509c  0000509c  0000209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00005100  000051f4  00002100  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000052e8  000052e8  000022e8  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  000052f8  000052f8  000021f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002d0  00000000  00000000  00002218  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003fda  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001539  00000000  00000000  000064c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000017a1  00000000  00000000  000079fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004f0  00000000  00000000  0000919c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000108f  00000000  00000000  0000968c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001add  00000000  00000000  0000a71b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000c1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000228  00000000  00000000  0000c238  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d646  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0000d649  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d64d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d64e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000d64f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000d658  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000d661  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000010  00000000  00000000  0000d66a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  0000d67a  2**0
                  CONTENTS, READONLY
 26 .jdi          00003e2c  00000000  00000000  0000d69d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000734e4  00000000  00000000  000114c9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000509c l    d  .rodata	00000000 .rodata
00005100 l    d  .rwdata	00000000 .rwdata
000052e8 l    d  .bss	00000000 .bss
000052f8 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../clock_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004728 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005100 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00004f70 g     F .text	0000002c alt_main
000051f4 g       *ABS*	00000000 __flash_rwdata_start
000046dc g     F .text	0000004c printf
00004f9c g     F .text	00000038 alt_putstr
000051ec g     O .rwdata	00000004 jtag_uart
00005094 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
000042b8 g     F .text	0000005c blinker
00004020 g       *ABS*	00000000 __flash_exceptions_start
000052e8 g     O .bss	00000004 errno
00004404 g     F .text	00000008 WriteNios
000052f0 g     O .bss	00000004 alt_argv
0000d1e0 g       *ABS*	00000000 _gp
000040a4 g     F .text	0000009c SetSegment
00004188 g     F .text	00000048 SetMinute
000046a0 g     F .text	0000003c _printf_r
000045bc g     F .text	00000064 .hidden __udivsi3
00004000 g       *ABS*	00000000 __alt_mem_ram
000041d0 g     F .text	00000048 SetSecond
000051e4 g     O .rwdata	00000004 _global_impure_ptr
000052f8 g       *ABS*	00000000 __bss_end
0000508c g     F .text	00000004 alt_dcache_flush_all
00004314 g     F .text	000000b0 Timer
000051f4 g       *ABS*	00000000 __ram_rwdata_end
00004fd4 g     F .text	00000060 write
00005100 g       *ABS*	00000000 __ram_rodata_end
00004620 g     F .text	00000058 .hidden __umodsi3
0000408c g     F .text	00000018 SetNullSecond
000052f8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005058 g     F .text	00000034 altera_avalon_jtag_uart_write
00004794 g     F .text	0000052c ___vfprintf_internal_r
00004020 g     F .text	0000003c _start
00005054 g     F .text	00000004 alt_sys_init
00004678 g     F .text	00000028 .hidden __mulsi3
00005100 g       *ABS*	00000000 __ram_rwdata_start
0000509c g       *ABS*	00000000 __ram_rodata_start
0000405c g     F .text	00000018 SetNullHour
00004e08 g     F .text	00000088 alt_busy_sleep
000052f8 g       *ABS*	00000000 __alt_stack_base
000051e0 g     O .rwdata	00000004 cont
00004cdc g     F .text	000000b8 __sfvwrite_small_dev
000052e8 g       *ABS*	00000000 __bss_start
0000440c g     F .text	000000b8 main
000052ec g     O .bss	00000004 alt_envp
00004218 g     F .text	000000a0 Clock
000051f0 g     O .rwdata	00000004 alt_errno
000044c4 g     F .text	00000084 .hidden __divsi3
0000509c g       *ABS*	00000000 __flash_rodata_start
00005034 g     F .text	00000020 alt_irq_init
00004db0 g     F .text	00000058 _write_r
000051e8 g     O .rwdata	00000004 _impure_ptr
000052f4 g     O .bss	00000004 alt_argc
000043c4 g     F .text	00000038 ClearClock
00004020 g       *ABS*	00000000 __ram_exceptions_start
000043fc g     F .text	00000008 ReadNios
000051f4 g       *ABS*	00000000 _edata
000052f8 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004548 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004140 g     F .text	00000048 SetHour
00004d94 g     F .text	0000001c strlen
00005090 g     F .text	00000004 alt_icache_flush_all
00004cc0 g     F .text	0000001c __vfprintf_internal
00004074 g     F .text	00000018 SetNullMinute
00004e90 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b47814 	ori	gp,gp,53728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1094ba14 	ori	r2,r2,21224

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d4be14 	ori	r3,r3,21240

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004e900 	call	4e90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	0004f700 	call	4f70 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <SetNullHour>:
int ReadNios(int base){
	return IORD_ALTERA_AVALON_PIO_DATA(base);
}

void WriteNios(int base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(base, value);
    405c:	00803fc4 	movi	r2,255
    4060:	00e01014 	movui	r3,32832
    4064:	18800035 	stwio	r2,0(r3)
    4068:	00e01414 	movui	r3,32848
    406c:	18800035 	stwio	r2,0(r3)
    4070:	f800283a 	ret

00004074 <SetNullMinute>:
    4074:	00803fc4 	movi	r2,255
    4078:	00e00814 	movui	r3,32800
    407c:	18800035 	stwio	r2,0(r3)
    4080:	00e00c14 	movui	r3,32816
    4084:	18800035 	stwio	r2,0(r3)
    4088:	f800283a 	ret

0000408c <SetNullSecond>:
    408c:	00803fc4 	movi	r2,255
    4090:	00e00014 	movui	r3,32768
    4094:	18800035 	stwio	r2,0(r3)
    4098:	00e00414 	movui	r3,32784
    409c:	18800035 	stwio	r2,0(r3)
    40a0:	f800283a 	ret

000040a4 <SetSegment>:
	SetSegment(SEG2_BASE, sec_1);
}

void SetSegment(int base, int value)
{
	switch (value)
    40a4:	00800244 	movi	r2,9
    40a8:	11402436 	bltu	r2,r5,413c <SetSegment+0x98>
    40ac:	280a90ba 	slli	r5,r5,2
    40b0:	00800034 	movhi	r2,0
    40b4:	10903104 	addi	r2,r2,16580
    40b8:	288b883a 	add	r5,r5,r2
    40bc:	28800017 	ldw	r2,0(r5)
    40c0:	1000683a 	jmp	r2
    40c4:	00004134 	movhi	zero,260
    40c8:	000040ec 	andhi	zero,zero,259
    40cc:	000040f4 	movhi	zero,259
    40d0:	000040fc 	xorhi	zero,zero,259
    40d4:	00004104 	movi	zero,260
    40d8:	0000410c 	andi	zero,zero,260
    40dc:	00004114 	movui	zero,260
    40e0:	0000411c 	xori	zero,zero,260
    40e4:	00004124 	muli	zero,zero,260
    40e8:	0000412c 	andhi	zero,zero,260
int ReadNios(int base){
	return IORD_ALTERA_AVALON_PIO_DATA(base);
}

void WriteNios(int base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(base, value);
    40ec:	00801e44 	movi	r2,121
    40f0:	00001106 	br	4138 <SetSegment+0x94>
    40f4:	00800904 	movi	r2,36
    40f8:	00000f06 	br	4138 <SetSegment+0x94>
    40fc:	00800c04 	movi	r2,48
    4100:	00000d06 	br	4138 <SetSegment+0x94>
    4104:	00800644 	movi	r2,25
    4108:	00000b06 	br	4138 <SetSegment+0x94>
    410c:	00800484 	movi	r2,18
    4110:	00000906 	br	4138 <SetSegment+0x94>
    4114:	00800084 	movi	r2,2
    4118:	00000706 	br	4138 <SetSegment+0x94>
    411c:	00801e04 	movi	r2,120
    4120:	00000506 	br	4138 <SetSegment+0x94>
    4124:	20000035 	stwio	zero,0(r4)
    4128:	f800283a 	ret
    412c:	00800604 	movi	r2,24
    4130:	00000106 	br	4138 <SetSegment+0x94>
    4134:	00801004 	movi	r2,64
    4138:	20800035 	stwio	r2,0(r4)
    413c:	f800283a 	ret

00004140 <SetHour>:

	}
}

void SetHour(int hour)
{
    4140:	defffe04 	addi	sp,sp,-8
	int hour_0 = hour % 10;
	int hour_1 = hour / 10;
	SetSegment(SEG5_BASE, hour_0);
    4144:	01400284 	movi	r5,10

	}
}

void SetHour(int hour)
{
    4148:	dfc00115 	stw	ra,4(sp)
    414c:	dc000015 	stw	r16,0(sp)
    4150:	2021883a 	mov	r16,r4
	int hour_0 = hour % 10;
	int hour_1 = hour / 10;
	SetSegment(SEG5_BASE, hour_0);
    4154:	00045480 	call	4548 <__modsi3>
    4158:	100b883a 	mov	r5,r2
    415c:	01201014 	movui	r4,32832
    4160:	00040a40 	call	40a4 <SetSegment>
	SetSegment(SEG6_BASE, hour_1);
    4164:	8009883a 	mov	r4,r16
    4168:	01400284 	movi	r5,10
    416c:	00044c40 	call	44c4 <__divsi3>
    4170:	100b883a 	mov	r5,r2
    4174:	01201414 	movui	r4,32848
}
    4178:	dfc00117 	ldw	ra,4(sp)
    417c:	dc000017 	ldw	r16,0(sp)
    4180:	dec00204 	addi	sp,sp,8
void SetHour(int hour)
{
	int hour_0 = hour % 10;
	int hour_1 = hour / 10;
	SetSegment(SEG5_BASE, hour_0);
	SetSegment(SEG6_BASE, hour_1);
    4184:	00040a41 	jmpi	40a4 <SetSegment>

00004188 <SetMinute>:
}

void SetMinute(int minute)
{
    4188:	defffe04 	addi	sp,sp,-8
	int min_0 = minute % 10;
	int min_1 = minute / 10;
	SetSegment(SEG3_BASE, min_0);
    418c:	01400284 	movi	r5,10
	SetSegment(SEG5_BASE, hour_0);
	SetSegment(SEG6_BASE, hour_1);
}

void SetMinute(int minute)
{
    4190:	dfc00115 	stw	ra,4(sp)
    4194:	dc000015 	stw	r16,0(sp)
    4198:	2021883a 	mov	r16,r4
	int min_0 = minute % 10;
	int min_1 = minute / 10;
	SetSegment(SEG3_BASE, min_0);
    419c:	00045480 	call	4548 <__modsi3>
    41a0:	100b883a 	mov	r5,r2
    41a4:	01200814 	movui	r4,32800
    41a8:	00040a40 	call	40a4 <SetSegment>
	SetSegment(SEG4_BASE, min_1);
    41ac:	8009883a 	mov	r4,r16
    41b0:	01400284 	movi	r5,10
    41b4:	00044c40 	call	44c4 <__divsi3>
    41b8:	100b883a 	mov	r5,r2
    41bc:	01200c14 	movui	r4,32816
}
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	dc000017 	ldw	r16,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
void SetMinute(int minute)
{
	int min_0 = minute % 10;
	int min_1 = minute / 10;
	SetSegment(SEG3_BASE, min_0);
	SetSegment(SEG4_BASE, min_1);
    41cc:	00040a41 	jmpi	40a4 <SetSegment>

000041d0 <SetSecond>:
}

void SetSecond(int second)
{
    41d0:	defffe04 	addi	sp,sp,-8
	int sec_0 = second % 10;
	int sec_1 = second / 10;
	SetSegment(SEG1_BASE, sec_0);
    41d4:	01400284 	movi	r5,10
	SetSegment(SEG3_BASE, min_0);
	SetSegment(SEG4_BASE, min_1);
}

void SetSecond(int second)
{
    41d8:	dfc00115 	stw	ra,4(sp)
    41dc:	dc000015 	stw	r16,0(sp)
    41e0:	2021883a 	mov	r16,r4
	int sec_0 = second % 10;
	int sec_1 = second / 10;
	SetSegment(SEG1_BASE, sec_0);
    41e4:	00045480 	call	4548 <__modsi3>
    41e8:	100b883a 	mov	r5,r2
    41ec:	01200014 	movui	r4,32768
    41f0:	00040a40 	call	40a4 <SetSegment>
	SetSegment(SEG2_BASE, sec_1);
    41f4:	8009883a 	mov	r4,r16
    41f8:	01400284 	movi	r5,10
    41fc:	00044c40 	call	44c4 <__divsi3>
    4200:	100b883a 	mov	r5,r2
    4204:	01200414 	movui	r4,32784
}
    4208:	dfc00117 	ldw	ra,4(sp)
    420c:	dc000017 	ldw	r16,0(sp)
    4210:	dec00204 	addi	sp,sp,8
void SetSecond(int second)
{
	int sec_0 = second % 10;
	int sec_1 = second / 10;
	SetSegment(SEG1_BASE, sec_0);
	SetSegment(SEG2_BASE, sec_1);
    4214:	00040a41 	jmpi	40a4 <SetSegment>

00004218 <Clock>:
	WriteNios(SEG1_BASE, 255);
	WriteNios(SEG2_BASE, 255);
}

void Clock()
{
    4218:	defffb04 	addi	sp,sp,-20
    421c:	dcc00315 	stw	r19,12(sp)
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
    4220:	04c00074 	movhi	r19,1
	WriteNios(SEG1_BASE, 255);
	WriteNios(SEG2_BASE, 255);
}

void Clock()
{
    4224:	dfc00415 	stw	ra,16(sp)
    4228:	dc800215 	stw	r18,8(sp)
    422c:	dc400115 	stw	r17,4(sp)
    4230:	dc000015 	stw	r16,0(sp)
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
    4234:	9cd46004 	addi	r19,r19,20864

	int seg = 0;
	int min = 0;
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
    4238:	010003f4 	movhi	r4,15
    423c:	21109004 	addi	r4,r4,16960
    4240:	0004e080 	call	4e08 <alt_busy_sleep>
		if (cont == 86400)
    4244:	d0a00017 	ldw	r2,-32768(gp)
    4248:	14c0011e 	bne	r2,r19,4250 <Clock+0x38>
			cont = 0;
    424c:	d0200015 	stw	zero,-32768(gp)
		hora = cont / 3600;
    4250:	d4200017 	ldw	r16,-32768(gp)
    4254:	01438404 	movi	r5,3600
    4258:	8009883a 	mov	r4,r16
    425c:	00044c40 	call	44c4 <__divsi3>
		min = (cont / 60) - (hora * 60);
    4260:	01400f04 	movi	r5,60
    4264:	8009883a 	mov	r4,r16
	int hora = 0;
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
			cont = 0;
		hora = cont / 3600;
    4268:	1025883a 	mov	r18,r2
		min = (cont / 60) - (hora * 60);
    426c:	00044c40 	call	44c4 <__divsi3>
    4270:	017ff104 	movi	r5,-60
    4274:	9009883a 	mov	r4,r18
    4278:	1023883a 	mov	r17,r2
    427c:	00046780 	call	4678 <__mulsi3>
		seg = cont % 60;
		SetHour(hora);
    4280:	9009883a 	mov	r4,r18
	while (1){
		alt_busy_sleep(SECOND);
		if (cont == 86400)
			cont = 0;
		hora = cont / 3600;
		min = (cont / 60) - (hora * 60);
    4284:	88a3883a 	add	r17,r17,r2
		seg = cont % 60;
		SetHour(hora);
    4288:	00041400 	call	4140 <SetHour>
		SetMinute(min);
    428c:	8809883a 	mov	r4,r17
    4290:	00041880 	call	4188 <SetMinute>
		SetSecond(seg);
    4294:	01400f04 	movi	r5,60
    4298:	8009883a 	mov	r4,r16
    429c:	00045480 	call	4548 <__modsi3>
    42a0:	1009883a 	mov	r4,r2
    42a4:	00041d00 	call	41d0 <SetSecond>
		cont = cont + 1;
    42a8:	d0a00017 	ldw	r2,-32768(gp)
    42ac:	10800044 	addi	r2,r2,1
    42b0:	d0a00015 	stw	r2,-32768(gp)

	}
    42b4:	003fe006 	br	4238 <Clock+0x20>

000042b8 <blinker>:

	blinker(5);
}

void blinker(int secs)
{
    42b8:	defffe04 	addi	sp,sp,-8
    42bc:	dc000015 	stw	r16,0(sp)
    42c0:	dfc00115 	stw	ra,4(sp)
    42c4:	2021883a 	mov	r16,r4
	int temp=secs;

	while(temp>=0)
    42c8:	80001116 	blt	r16,zero,4310 <blinker+0x58>
	{
		SetHour(0);
    42cc:	0009883a 	mov	r4,zero
    42d0:	00041400 	call	4140 <SetHour>
		SetMinute(0);
    42d4:	0009883a 	mov	r4,zero
    42d8:	00041880 	call	4188 <SetMinute>
		SetSecond(0);
    42dc:	0009883a 	mov	r4,zero
    42e0:	00041d00 	call	41d0 <SetSecond>
		alt_busy_sleep(SECOND/2);
    42e4:	01000234 	movhi	r4,8
    42e8:	21284804 	addi	r4,r4,-24288
    42ec:	0004e080 	call	4e08 <alt_busy_sleep>
		SetNullHour();
    42f0:	000405c0 	call	405c <SetNullHour>
		SetNullMinute();
    42f4:	00040740 	call	4074 <SetNullMinute>
		SetNullSecond();
    42f8:	000408c0 	call	408c <SetNullSecond>
		alt_busy_sleep(SECOND/2);
    42fc:	01000234 	movhi	r4,8
    4300:	21284804 	addi	r4,r4,-24288
    4304:	0004e080 	call	4e08 <alt_busy_sleep>
		temp=temp-1;
    4308:	843fffc4 	addi	r16,r16,-1
    430c:	003fee06 	br	42c8 <blinker+0x10>
	}
	Clock();
    4310:	00042180 	call	4218 <Clock>

00004314 <Timer>:
	}
	return 0;
}

void Timer(int hour, int minute, int sec)
{
    4314:	defffc04 	addi	sp,sp,-16
    4318:	dc800215 	stw	r18,8(sp)
    431c:	2825883a 	mov	r18,r5
	int cont  = hour * 3600 + minute * 60 + sec;
    4320:	01438404 	movi	r5,3600
	}
	return 0;
}

void Timer(int hour, int minute, int sec)
{
    4324:	dfc00315 	stw	ra,12(sp)
    4328:	dc400115 	stw	r17,4(sp)
    432c:	dc000015 	stw	r16,0(sp)
    4330:	3023883a 	mov	r17,r6
	int cont  = hour * 3600 + minute * 60 + sec;
    4334:	00046780 	call	4678 <__mulsi3>
    4338:	01400f04 	movi	r5,60
    433c:	9009883a 	mov	r4,r18
    4340:	1021883a 	mov	r16,r2
    4344:	00046780 	call	4678 <__mulsi3>
    4348:	8085883a 	add	r2,r16,r2
    434c:	1461883a 	add	r16,r2,r17
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (cont >= 0){
    4350:	80001a16 	blt	r16,zero,43bc <Timer+0xa8>
		alt_busy_sleep(SECOND);
    4354:	010003f4 	movhi	r4,15
    4358:	21109004 	addi	r4,r4,16960
    435c:	0004e080 	call	4e08 <alt_busy_sleep>
		hora = cont / 3600;
    4360:	8009883a 	mov	r4,r16
    4364:	01438404 	movi	r5,3600
    4368:	00044c40 	call	44c4 <__divsi3>
		min = (cont / 60) - (hora * 60);
    436c:	8009883a 	mov	r4,r16
    4370:	01400f04 	movi	r5,60
	int seg = 0;
	int min = 0;
	int hora = 0;
	while (cont >= 0){
		alt_busy_sleep(SECOND);
		hora = cont / 3600;
    4374:	1025883a 	mov	r18,r2
		min = (cont / 60) - (hora * 60);
    4378:	00044c40 	call	44c4 <__divsi3>
    437c:	017ff104 	movi	r5,-60
    4380:	9009883a 	mov	r4,r18
    4384:	1023883a 	mov	r17,r2
    4388:	00046780 	call	4678 <__mulsi3>
		seg = cont % 60;
		SetHour(hora);
    438c:	9009883a 	mov	r4,r18
	int min = 0;
	int hora = 0;
	while (cont >= 0){
		alt_busy_sleep(SECOND);
		hora = cont / 3600;
		min = (cont / 60) - (hora * 60);
    4390:	88a3883a 	add	r17,r17,r2
		seg = cont % 60;
		SetHour(hora);
    4394:	00041400 	call	4140 <SetHour>
		SetMinute(min);
    4398:	8809883a 	mov	r4,r17
    439c:	00041880 	call	4188 <SetMinute>
		SetSecond(seg);
    43a0:	8009883a 	mov	r4,r16
    43a4:	01400f04 	movi	r5,60
    43a8:	00045480 	call	4548 <__modsi3>
    43ac:	1009883a 	mov	r4,r2
    43b0:	00041d00 	call	41d0 <SetSecond>
		cont = cont - 1;
    43b4:	843fffc4 	addi	r16,r16,-1
    43b8:	003fe506 	br	4350 <Timer+0x3c>
	}

	blinker(5);
    43bc:	01000144 	movi	r4,5
    43c0:	00042b80 	call	42b8 <blinker>

000043c4 <ClearClock>:
int ReadNios(int base){
	return IORD_ALTERA_AVALON_PIO_DATA(base);
}

void WriteNios(int base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(base, value);
    43c4:	00803fc4 	movi	r2,255
    43c8:	00e00014 	movui	r3,32768
    43cc:	18800035 	stwio	r2,0(r3)
    43d0:	00e00414 	movui	r3,32784
    43d4:	18800035 	stwio	r2,0(r3)
    43d8:	00e00814 	movui	r3,32800
    43dc:	18800035 	stwio	r2,0(r3)
    43e0:	00e00c14 	movui	r3,32816
    43e4:	18800035 	stwio	r2,0(r3)
    43e8:	00e01014 	movui	r3,32832
    43ec:	18800035 	stwio	r2,0(r3)
    43f0:	00e01414 	movui	r3,32848
    43f4:	18800035 	stwio	r2,0(r3)
    43f8:	f800283a 	ret

000043fc <ReadNios>:
	WriteNios(SEG6_BASE, 255);
}

int ReadNios(int base){
	return IORD_ALTERA_AVALON_PIO_DATA(base);
}
    43fc:	20800037 	ldwio	r2,0(r4)
    4400:	f800283a 	ret

00004404 <WriteNios>:

void WriteNios(int base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(base, value);
    4404:	21400035 	stwio	r5,0(r4)
    4408:	f800283a 	ret

0000440c <main>:

int cont = 86390;

int main()
{
	alt_putstr("Hello from Nios II!\n");
    440c:	01000034 	movhi	r4,0
void blinker(int);

int cont = 86390;

int main()
{
    4410:	defffb04 	addi	sp,sp,-20
	alt_putstr("Hello from Nios II!\n");
    4414:	21142704 	addi	r4,r4,20636
void blinker(int);

int cont = 86390;

int main()
{
    4418:	dfc00415 	stw	ra,16(sp)
    441c:	dcc00315 	stw	r19,12(sp)
    4420:	dc800215 	stw	r18,8(sp)
    4424:	dc400115 	stw	r17,4(sp)
    4428:	dc000015 	stw	r16,0(sp)
	alt_putstr("Hello from Nios II!\n");
    442c:	0004f9c0 	call	4f9c <alt_putstr>
	ClearClock();
    4430:	00043c40 	call	43c4 <ClearClock>
	WriteNios(SEG5_BASE, 255);
	WriteNios(SEG6_BASE, 255);
}

int ReadNios(int base){
	return IORD_ALTERA_AVALON_PIO_DATA(base);
    4434:	00a01814 	movui	r2,32864
    4438:	11400037 	ldwio	r5,0(r2)
    443c:	00a01c14 	movui	r2,32880
    4440:	14c00037 	ldwio	r19,0(r2)
    4444:	00a02014 	movui	r2,32896
    4448:	14800037 	ldwio	r18,0(r2)
    444c:	00a02414 	movui	r2,32912
    4450:	14400037 	ldwio	r17,0(r2)
    4454:	00a04014 	movui	r2,33024
    4458:	14000037 	ldwio	r16,0(r2)
		int readButton1 = ReadNios(BUTTON1_BASE);
		int readButton2 = ReadNios(BUTTON2_BASE);
		int readButton3 = ReadNios(BUTTON3_BASE);
		int readButton4 = ReadNios(BUTTON4_BASE);

		printf("Switch: %i\n", readSwitch);
    445c:	01000034 	movhi	r4,0
    4460:	21142d04 	addi	r4,r4,20660
    4464:	00046dc0 	call	46dc <printf>
		printf("Button1: %i\n", readButton1);
    4468:	01000034 	movhi	r4,0
    446c:	980b883a 	mov	r5,r19
    4470:	21143004 	addi	r4,r4,20672
    4474:	00046dc0 	call	46dc <printf>
		printf("Button2: %i\n", readButton2);
    4478:	01000034 	movhi	r4,0
    447c:	900b883a 	mov	r5,r18
    4480:	21143404 	addi	r4,r4,20688
    4484:	00046dc0 	call	46dc <printf>
		printf("Button3: %i\n", readButton3);
    4488:	01000034 	movhi	r4,0
    448c:	880b883a 	mov	r5,r17
    4490:	21143804 	addi	r4,r4,20704
    4494:	00046dc0 	call	46dc <printf>
		printf("Button4: %i\n\n\n\n", readButton4);
    4498:	01000034 	movhi	r4,0
    449c:	800b883a 	mov	r5,r16
    44a0:	21143c04 	addi	r4,r4,20720
    44a4:	00046dc0 	call	46dc <printf>

		alt_busy_sleep(SECOND/2);
    44a8:	01000234 	movhi	r4,8
    44ac:	21284804 	addi	r4,r4,-24288
    44b0:	0004e080 	call	4e08 <alt_busy_sleep>
int ReadNios(int base){
	return IORD_ALTERA_AVALON_PIO_DATA(base);
}

void WriteNios(int base, int value){
	IOWR_ALTERA_AVALON_PIO_DATA(base, value);
    44b4:	00a04414 	movui	r2,33040
    44b8:	00c001c4 	movi	r3,7
    44bc:	10c00035 	stwio	r3,0(r2)
    44c0:	003fdc06 	br	4434 <main+0x28>

000044c4 <__divsi3>:
    44c4:	20001b16 	blt	r4,zero,4534 <__divsi3+0x70>
    44c8:	000f883a 	mov	r7,zero
    44cc:	28001616 	blt	r5,zero,4528 <__divsi3+0x64>
    44d0:	200d883a 	mov	r6,r4
    44d4:	29001a2e 	bgeu	r5,r4,4540 <__divsi3+0x7c>
    44d8:	00800804 	movi	r2,32
    44dc:	00c00044 	movi	r3,1
    44e0:	00000106 	br	44e8 <__divsi3+0x24>
    44e4:	10000d26 	beq	r2,zero,451c <__divsi3+0x58>
    44e8:	294b883a 	add	r5,r5,r5
    44ec:	10bfffc4 	addi	r2,r2,-1
    44f0:	18c7883a 	add	r3,r3,r3
    44f4:	293ffb36 	bltu	r5,r4,44e4 <__divsi3+0x20>
    44f8:	0005883a 	mov	r2,zero
    44fc:	18000726 	beq	r3,zero,451c <__divsi3+0x58>
    4500:	0005883a 	mov	r2,zero
    4504:	31400236 	bltu	r6,r5,4510 <__divsi3+0x4c>
    4508:	314dc83a 	sub	r6,r6,r5
    450c:	10c4b03a 	or	r2,r2,r3
    4510:	1806d07a 	srli	r3,r3,1
    4514:	280ad07a 	srli	r5,r5,1
    4518:	183ffa1e 	bne	r3,zero,4504 <__divsi3+0x40>
    451c:	38000126 	beq	r7,zero,4524 <__divsi3+0x60>
    4520:	0085c83a 	sub	r2,zero,r2
    4524:	f800283a 	ret
    4528:	014bc83a 	sub	r5,zero,r5
    452c:	39c0005c 	xori	r7,r7,1
    4530:	003fe706 	br	44d0 <__divsi3+0xc>
    4534:	0109c83a 	sub	r4,zero,r4
    4538:	01c00044 	movi	r7,1
    453c:	003fe306 	br	44cc <__divsi3+0x8>
    4540:	00c00044 	movi	r3,1
    4544:	003fee06 	br	4500 <__divsi3+0x3c>

00004548 <__modsi3>:
    4548:	20001716 	blt	r4,zero,45a8 <__modsi3+0x60>
    454c:	000f883a 	mov	r7,zero
    4550:	2005883a 	mov	r2,r4
    4554:	28001216 	blt	r5,zero,45a0 <__modsi3+0x58>
    4558:	2900162e 	bgeu	r5,r4,45b4 <__modsi3+0x6c>
    455c:	01800804 	movi	r6,32
    4560:	00c00044 	movi	r3,1
    4564:	00000106 	br	456c <__modsi3+0x24>
    4568:	30000a26 	beq	r6,zero,4594 <__modsi3+0x4c>
    456c:	294b883a 	add	r5,r5,r5
    4570:	31bfffc4 	addi	r6,r6,-1
    4574:	18c7883a 	add	r3,r3,r3
    4578:	293ffb36 	bltu	r5,r4,4568 <__modsi3+0x20>
    457c:	18000526 	beq	r3,zero,4594 <__modsi3+0x4c>
    4580:	1806d07a 	srli	r3,r3,1
    4584:	11400136 	bltu	r2,r5,458c <__modsi3+0x44>
    4588:	1145c83a 	sub	r2,r2,r5
    458c:	280ad07a 	srli	r5,r5,1
    4590:	183ffb1e 	bne	r3,zero,4580 <__modsi3+0x38>
    4594:	38000126 	beq	r7,zero,459c <__modsi3+0x54>
    4598:	0085c83a 	sub	r2,zero,r2
    459c:	f800283a 	ret
    45a0:	014bc83a 	sub	r5,zero,r5
    45a4:	003fec06 	br	4558 <__modsi3+0x10>
    45a8:	0109c83a 	sub	r4,zero,r4
    45ac:	01c00044 	movi	r7,1
    45b0:	003fe706 	br	4550 <__modsi3+0x8>
    45b4:	00c00044 	movi	r3,1
    45b8:	003ff106 	br	4580 <__modsi3+0x38>

000045bc <__udivsi3>:
    45bc:	200d883a 	mov	r6,r4
    45c0:	2900152e 	bgeu	r5,r4,4618 <__udivsi3+0x5c>
    45c4:	28001416 	blt	r5,zero,4618 <__udivsi3+0x5c>
    45c8:	00800804 	movi	r2,32
    45cc:	00c00044 	movi	r3,1
    45d0:	00000206 	br	45dc <__udivsi3+0x20>
    45d4:	10000e26 	beq	r2,zero,4610 <__udivsi3+0x54>
    45d8:	28000516 	blt	r5,zero,45f0 <__udivsi3+0x34>
    45dc:	294b883a 	add	r5,r5,r5
    45e0:	10bfffc4 	addi	r2,r2,-1
    45e4:	18c7883a 	add	r3,r3,r3
    45e8:	293ffa36 	bltu	r5,r4,45d4 <__udivsi3+0x18>
    45ec:	18000826 	beq	r3,zero,4610 <__udivsi3+0x54>
    45f0:	0005883a 	mov	r2,zero
    45f4:	31400236 	bltu	r6,r5,4600 <__udivsi3+0x44>
    45f8:	314dc83a 	sub	r6,r6,r5
    45fc:	10c4b03a 	or	r2,r2,r3
    4600:	1806d07a 	srli	r3,r3,1
    4604:	280ad07a 	srli	r5,r5,1
    4608:	183ffa1e 	bne	r3,zero,45f4 <__udivsi3+0x38>
    460c:	f800283a 	ret
    4610:	0005883a 	mov	r2,zero
    4614:	f800283a 	ret
    4618:	00c00044 	movi	r3,1
    461c:	003ff406 	br	45f0 <__udivsi3+0x34>

00004620 <__umodsi3>:
    4620:	2005883a 	mov	r2,r4
    4624:	2900122e 	bgeu	r5,r4,4670 <__umodsi3+0x50>
    4628:	28001116 	blt	r5,zero,4670 <__umodsi3+0x50>
    462c:	01800804 	movi	r6,32
    4630:	00c00044 	movi	r3,1
    4634:	00000206 	br	4640 <__umodsi3+0x20>
    4638:	30000c26 	beq	r6,zero,466c <__umodsi3+0x4c>
    463c:	28000516 	blt	r5,zero,4654 <__umodsi3+0x34>
    4640:	294b883a 	add	r5,r5,r5
    4644:	31bfffc4 	addi	r6,r6,-1
    4648:	18c7883a 	add	r3,r3,r3
    464c:	293ffa36 	bltu	r5,r4,4638 <__umodsi3+0x18>
    4650:	18000626 	beq	r3,zero,466c <__umodsi3+0x4c>
    4654:	1806d07a 	srli	r3,r3,1
    4658:	11400136 	bltu	r2,r5,4660 <__umodsi3+0x40>
    465c:	1145c83a 	sub	r2,r2,r5
    4660:	280ad07a 	srli	r5,r5,1
    4664:	183ffb1e 	bne	r3,zero,4654 <__umodsi3+0x34>
    4668:	f800283a 	ret
    466c:	f800283a 	ret
    4670:	00c00044 	movi	r3,1
    4674:	003ff706 	br	4654 <__umodsi3+0x34>

00004678 <__mulsi3>:
    4678:	0005883a 	mov	r2,zero
    467c:	20000726 	beq	r4,zero,469c <__mulsi3+0x24>
    4680:	20c0004c 	andi	r3,r4,1
    4684:	2008d07a 	srli	r4,r4,1
    4688:	18000126 	beq	r3,zero,4690 <__mulsi3+0x18>
    468c:	1145883a 	add	r2,r2,r5
    4690:	294b883a 	add	r5,r5,r5
    4694:	203ffa1e 	bne	r4,zero,4680 <__mulsi3+0x8>
    4698:	f800283a 	ret
    469c:	f800283a 	ret

000046a0 <_printf_r>:
    46a0:	defffd04 	addi	sp,sp,-12
    46a4:	dfc00015 	stw	ra,0(sp)
    46a8:	d9800115 	stw	r6,4(sp)
    46ac:	d9c00215 	stw	r7,8(sp)
    46b0:	20c00217 	ldw	r3,8(r4)
    46b4:	01800034 	movhi	r6,0
    46b8:	31933704 	addi	r6,r6,19676
    46bc:	19800115 	stw	r6,4(r3)
    46c0:	280d883a 	mov	r6,r5
    46c4:	21400217 	ldw	r5,8(r4)
    46c8:	d9c00104 	addi	r7,sp,4
    46cc:	00047940 	call	4794 <___vfprintf_internal_r>
    46d0:	dfc00017 	ldw	ra,0(sp)
    46d4:	dec00304 	addi	sp,sp,12
    46d8:	f800283a 	ret

000046dc <printf>:
    46dc:	defffc04 	addi	sp,sp,-16
    46e0:	dfc00015 	stw	ra,0(sp)
    46e4:	d9400115 	stw	r5,4(sp)
    46e8:	d9800215 	stw	r6,8(sp)
    46ec:	d9c00315 	stw	r7,12(sp)
    46f0:	00800034 	movhi	r2,0
    46f4:	10947a04 	addi	r2,r2,20968
    46f8:	10800017 	ldw	r2,0(r2)
    46fc:	01400034 	movhi	r5,0
    4700:	29533704 	addi	r5,r5,19676
    4704:	10c00217 	ldw	r3,8(r2)
    4708:	d9800104 	addi	r6,sp,4
    470c:	19400115 	stw	r5,4(r3)
    4710:	200b883a 	mov	r5,r4
    4714:	11000217 	ldw	r4,8(r2)
    4718:	0004cc00 	call	4cc0 <__vfprintf_internal>
    471c:	dfc00017 	ldw	ra,0(sp)
    4720:	dec00404 	addi	sp,sp,16
    4724:	f800283a 	ret

00004728 <print_repeat>:
    4728:	defffb04 	addi	sp,sp,-20
    472c:	dc800315 	stw	r18,12(sp)
    4730:	dc400215 	stw	r17,8(sp)
    4734:	dc000115 	stw	r16,4(sp)
    4738:	dfc00415 	stw	ra,16(sp)
    473c:	2025883a 	mov	r18,r4
    4740:	2823883a 	mov	r17,r5
    4744:	d9800005 	stb	r6,0(sp)
    4748:	3821883a 	mov	r16,r7
    474c:	04000a0e 	bge	zero,r16,4778 <print_repeat+0x50>
    4750:	88800117 	ldw	r2,4(r17)
    4754:	01c00044 	movi	r7,1
    4758:	d80d883a 	mov	r6,sp
    475c:	880b883a 	mov	r5,r17
    4760:	9009883a 	mov	r4,r18
    4764:	103ee83a 	callr	r2
    4768:	843fffc4 	addi	r16,r16,-1
    476c:	103ff726 	beq	r2,zero,474c <print_repeat+0x24>
    4770:	00bfffc4 	movi	r2,-1
    4774:	00000106 	br	477c <print_repeat+0x54>
    4778:	0005883a 	mov	r2,zero
    477c:	dfc00417 	ldw	ra,16(sp)
    4780:	dc800317 	ldw	r18,12(sp)
    4784:	dc400217 	ldw	r17,8(sp)
    4788:	dc000117 	ldw	r16,4(sp)
    478c:	dec00504 	addi	sp,sp,20
    4790:	f800283a 	ret

00004794 <___vfprintf_internal_r>:
    4794:	deffe504 	addi	sp,sp,-108
    4798:	d8c00804 	addi	r3,sp,32
    479c:	ddc01815 	stw	r23,96(sp)
    47a0:	dd801715 	stw	r22,92(sp)
    47a4:	dd401615 	stw	r21,88(sp)
    47a8:	dd001515 	stw	r20,84(sp)
    47ac:	dcc01415 	stw	r19,80(sp)
    47b0:	dc801315 	stw	r18,76(sp)
    47b4:	dc401215 	stw	r17,72(sp)
    47b8:	dc001115 	stw	r16,68(sp)
    47bc:	dfc01a15 	stw	ra,104(sp)
    47c0:	df001915 	stw	fp,100(sp)
    47c4:	2029883a 	mov	r20,r4
    47c8:	2823883a 	mov	r17,r5
    47cc:	382d883a 	mov	r22,r7
    47d0:	d9800f15 	stw	r6,60(sp)
    47d4:	0021883a 	mov	r16,zero
    47d8:	d8000e15 	stw	zero,56(sp)
    47dc:	d8000a15 	stw	zero,40(sp)
    47e0:	002b883a 	mov	r21,zero
    47e4:	0027883a 	mov	r19,zero
    47e8:	0025883a 	mov	r18,zero
    47ec:	d8000c15 	stw	zero,48(sp)
    47f0:	d8000b15 	stw	zero,44(sp)
    47f4:	002f883a 	mov	r23,zero
    47f8:	d8c00915 	stw	r3,36(sp)
    47fc:	d8c00f17 	ldw	r3,60(sp)
    4800:	19000003 	ldbu	r4,0(r3)
    4804:	20803fcc 	andi	r2,r4,255
    4808:	1080201c 	xori	r2,r2,128
    480c:	10bfe004 	addi	r2,r2,-128
    4810:	10011e26 	beq	r2,zero,4c8c <___vfprintf_internal_r+0x4f8>
    4814:	00c00044 	movi	r3,1
    4818:	b8c01426 	beq	r23,r3,486c <___vfprintf_internal_r+0xd8>
    481c:	1dc00216 	blt	r3,r23,4828 <___vfprintf_internal_r+0x94>
    4820:	b8000626 	beq	r23,zero,483c <___vfprintf_internal_r+0xa8>
    4824:	00011506 	br	4c7c <___vfprintf_internal_r+0x4e8>
    4828:	01400084 	movi	r5,2
    482c:	b9401d26 	beq	r23,r5,48a4 <___vfprintf_internal_r+0x110>
    4830:	014000c4 	movi	r5,3
    4834:	b9402b26 	beq	r23,r5,48e4 <___vfprintf_internal_r+0x150>
    4838:	00011006 	br	4c7c <___vfprintf_internal_r+0x4e8>
    483c:	01400944 	movi	r5,37
    4840:	1140fc26 	beq	r2,r5,4c34 <___vfprintf_internal_r+0x4a0>
    4844:	88800117 	ldw	r2,4(r17)
    4848:	d9000005 	stb	r4,0(sp)
    484c:	01c00044 	movi	r7,1
    4850:	d80d883a 	mov	r6,sp
    4854:	880b883a 	mov	r5,r17
    4858:	a009883a 	mov	r4,r20
    485c:	103ee83a 	callr	r2
    4860:	1000d81e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4864:	84000044 	addi	r16,r16,1
    4868:	00010406 	br	4c7c <___vfprintf_internal_r+0x4e8>
    486c:	01400c04 	movi	r5,48
    4870:	1140fa26 	beq	r2,r5,4c5c <___vfprintf_internal_r+0x4c8>
    4874:	01400944 	movi	r5,37
    4878:	11400a1e 	bne	r2,r5,48a4 <___vfprintf_internal_r+0x110>
    487c:	d8800005 	stb	r2,0(sp)
    4880:	88800117 	ldw	r2,4(r17)
    4884:	b80f883a 	mov	r7,r23
    4888:	d80d883a 	mov	r6,sp
    488c:	880b883a 	mov	r5,r17
    4890:	a009883a 	mov	r4,r20
    4894:	103ee83a 	callr	r2
    4898:	1000ca1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    489c:	84000044 	addi	r16,r16,1
    48a0:	0000f506 	br	4c78 <___vfprintf_internal_r+0x4e4>
    48a4:	25fff404 	addi	r23,r4,-48
    48a8:	bdc03fcc 	andi	r23,r23,255
    48ac:	00c00244 	movi	r3,9
    48b0:	1dc00936 	bltu	r3,r23,48d8 <___vfprintf_internal_r+0x144>
    48b4:	00bfffc4 	movi	r2,-1
    48b8:	90800426 	beq	r18,r2,48cc <___vfprintf_internal_r+0x138>
    48bc:	01400284 	movi	r5,10
    48c0:	9009883a 	mov	r4,r18
    48c4:	00046780 	call	4678 <__mulsi3>
    48c8:	00000106 	br	48d0 <___vfprintf_internal_r+0x13c>
    48cc:	0005883a 	mov	r2,zero
    48d0:	b8a5883a 	add	r18,r23,r2
    48d4:	0000e206 	br	4c60 <___vfprintf_internal_r+0x4cc>
    48d8:	01400b84 	movi	r5,46
    48dc:	1140e426 	beq	r2,r5,4c70 <___vfprintf_internal_r+0x4dc>
    48e0:	05c00084 	movi	r23,2
    48e4:	213ff404 	addi	r4,r4,-48
    48e8:	27003fcc 	andi	fp,r4,255
    48ec:	00c00244 	movi	r3,9
    48f0:	1f000936 	bltu	r3,fp,4918 <___vfprintf_internal_r+0x184>
    48f4:	00bfffc4 	movi	r2,-1
    48f8:	98800426 	beq	r19,r2,490c <___vfprintf_internal_r+0x178>
    48fc:	01400284 	movi	r5,10
    4900:	9809883a 	mov	r4,r19
    4904:	00046780 	call	4678 <__mulsi3>
    4908:	00000106 	br	4910 <___vfprintf_internal_r+0x17c>
    490c:	0005883a 	mov	r2,zero
    4910:	e0a7883a 	add	r19,fp,r2
    4914:	0000d906 	br	4c7c <___vfprintf_internal_r+0x4e8>
    4918:	00c01b04 	movi	r3,108
    491c:	10c0d226 	beq	r2,r3,4c68 <___vfprintf_internal_r+0x4d4>
    4920:	013fffc4 	movi	r4,-1
    4924:	99000226 	beq	r19,r4,4930 <___vfprintf_internal_r+0x19c>
    4928:	d8000b15 	stw	zero,44(sp)
    492c:	00000106 	br	4934 <___vfprintf_internal_r+0x1a0>
    4930:	04c00044 	movi	r19,1
    4934:	01001a44 	movi	r4,105
    4938:	11001626 	beq	r2,r4,4994 <___vfprintf_internal_r+0x200>
    493c:	20800916 	blt	r4,r2,4964 <___vfprintf_internal_r+0x1d0>
    4940:	010018c4 	movi	r4,99
    4944:	11008826 	beq	r2,r4,4b68 <___vfprintf_internal_r+0x3d4>
    4948:	01001904 	movi	r4,100
    494c:	11001126 	beq	r2,r4,4994 <___vfprintf_internal_r+0x200>
    4950:	01001604 	movi	r4,88
    4954:	1100c81e 	bne	r2,r4,4c78 <___vfprintf_internal_r+0x4e4>
    4958:	00c00044 	movi	r3,1
    495c:	d8c00e15 	stw	r3,56(sp)
    4960:	00001506 	br	49b8 <___vfprintf_internal_r+0x224>
    4964:	01001cc4 	movi	r4,115
    4968:	11009826 	beq	r2,r4,4bcc <___vfprintf_internal_r+0x438>
    496c:	20800416 	blt	r4,r2,4980 <___vfprintf_internal_r+0x1ec>
    4970:	01001bc4 	movi	r4,111
    4974:	1100c01e 	bne	r2,r4,4c78 <___vfprintf_internal_r+0x4e4>
    4978:	05400204 	movi	r21,8
    497c:	00000f06 	br	49bc <___vfprintf_internal_r+0x228>
    4980:	01001d44 	movi	r4,117
    4984:	11000d26 	beq	r2,r4,49bc <___vfprintf_internal_r+0x228>
    4988:	01001e04 	movi	r4,120
    498c:	11000a26 	beq	r2,r4,49b8 <___vfprintf_internal_r+0x224>
    4990:	0000b906 	br	4c78 <___vfprintf_internal_r+0x4e4>
    4994:	d8c00a17 	ldw	r3,40(sp)
    4998:	b7000104 	addi	fp,r22,4
    499c:	18000726 	beq	r3,zero,49bc <___vfprintf_internal_r+0x228>
    49a0:	df000d15 	stw	fp,52(sp)
    49a4:	b5c00017 	ldw	r23,0(r22)
    49a8:	b800080e 	bge	r23,zero,49cc <___vfprintf_internal_r+0x238>
    49ac:	05efc83a 	sub	r23,zero,r23
    49b0:	02400044 	movi	r9,1
    49b4:	00000606 	br	49d0 <___vfprintf_internal_r+0x23c>
    49b8:	05400404 	movi	r21,16
    49bc:	b0c00104 	addi	r3,r22,4
    49c0:	d8c00d15 	stw	r3,52(sp)
    49c4:	b5c00017 	ldw	r23,0(r22)
    49c8:	d8000a15 	stw	zero,40(sp)
    49cc:	0013883a 	mov	r9,zero
    49d0:	d839883a 	mov	fp,sp
    49d4:	b8001726 	beq	r23,zero,4a34 <___vfprintf_internal_r+0x2a0>
    49d8:	a80b883a 	mov	r5,r21
    49dc:	b809883a 	mov	r4,r23
    49e0:	da401015 	stw	r9,64(sp)
    49e4:	00045bc0 	call	45bc <__udivsi3>
    49e8:	a80b883a 	mov	r5,r21
    49ec:	1009883a 	mov	r4,r2
    49f0:	102d883a 	mov	r22,r2
    49f4:	00046780 	call	4678 <__mulsi3>
    49f8:	b885c83a 	sub	r2,r23,r2
    49fc:	00c00244 	movi	r3,9
    4a00:	da401017 	ldw	r9,64(sp)
    4a04:	18800216 	blt	r3,r2,4a10 <___vfprintf_internal_r+0x27c>
    4a08:	10800c04 	addi	r2,r2,48
    4a0c:	00000506 	br	4a24 <___vfprintf_internal_r+0x290>
    4a10:	d8c00e17 	ldw	r3,56(sp)
    4a14:	18000226 	beq	r3,zero,4a20 <___vfprintf_internal_r+0x28c>
    4a18:	10800dc4 	addi	r2,r2,55
    4a1c:	00000106 	br	4a24 <___vfprintf_internal_r+0x290>
    4a20:	108015c4 	addi	r2,r2,87
    4a24:	e0800005 	stb	r2,0(fp)
    4a28:	b02f883a 	mov	r23,r22
    4a2c:	e7000044 	addi	fp,fp,1
    4a30:	003fe806 	br	49d4 <___vfprintf_internal_r+0x240>
    4a34:	e6efc83a 	sub	r23,fp,sp
    4a38:	9dc5c83a 	sub	r2,r19,r23
    4a3c:	0080090e 	bge	zero,r2,4a64 <___vfprintf_internal_r+0x2d0>
    4a40:	e085883a 	add	r2,fp,r2
    4a44:	01400c04 	movi	r5,48
    4a48:	d8c00917 	ldw	r3,36(sp)
    4a4c:	e009883a 	mov	r4,fp
    4a50:	e0c0032e 	bgeu	fp,r3,4a60 <___vfprintf_internal_r+0x2cc>
    4a54:	e7000044 	addi	fp,fp,1
    4a58:	21400005 	stb	r5,0(r4)
    4a5c:	e0bffa1e 	bne	fp,r2,4a48 <___vfprintf_internal_r+0x2b4>
    4a60:	e6efc83a 	sub	r23,fp,sp
    4a64:	d8c00b17 	ldw	r3,44(sp)
    4a68:	4dd1883a 	add	r8,r9,r23
    4a6c:	922dc83a 	sub	r22,r18,r8
    4a70:	18001626 	beq	r3,zero,4acc <___vfprintf_internal_r+0x338>
    4a74:	48000a26 	beq	r9,zero,4aa0 <___vfprintf_internal_r+0x30c>
    4a78:	00800b44 	movi	r2,45
    4a7c:	d8800805 	stb	r2,32(sp)
    4a80:	88800117 	ldw	r2,4(r17)
    4a84:	01c00044 	movi	r7,1
    4a88:	d9800804 	addi	r6,sp,32
    4a8c:	880b883a 	mov	r5,r17
    4a90:	a009883a 	mov	r4,r20
    4a94:	103ee83a 	callr	r2
    4a98:	10004a1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4a9c:	84000044 	addi	r16,r16,1
    4aa0:	0580070e 	bge	zero,r22,4ac0 <___vfprintf_internal_r+0x32c>
    4aa4:	b00f883a 	mov	r7,r22
    4aa8:	01800c04 	movi	r6,48
    4aac:	880b883a 	mov	r5,r17
    4ab0:	a009883a 	mov	r4,r20
    4ab4:	00047280 	call	4728 <print_repeat>
    4ab8:	1000421e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4abc:	85a1883a 	add	r16,r16,r22
    4ac0:	e02d883a 	mov	r22,fp
    4ac4:	bf2fc83a 	sub	r23,r23,fp
    4ac8:	00002006 	br	4b4c <___vfprintf_internal_r+0x3b8>
    4acc:	0580090e 	bge	zero,r22,4af4 <___vfprintf_internal_r+0x360>
    4ad0:	b00f883a 	mov	r7,r22
    4ad4:	01800804 	movi	r6,32
    4ad8:	880b883a 	mov	r5,r17
    4adc:	a009883a 	mov	r4,r20
    4ae0:	da401015 	stw	r9,64(sp)
    4ae4:	00047280 	call	4728 <print_repeat>
    4ae8:	da401017 	ldw	r9,64(sp)
    4aec:	1000351e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4af0:	85a1883a 	add	r16,r16,r22
    4af4:	483ff226 	beq	r9,zero,4ac0 <___vfprintf_internal_r+0x32c>
    4af8:	00800b44 	movi	r2,45
    4afc:	d8800805 	stb	r2,32(sp)
    4b00:	88800117 	ldw	r2,4(r17)
    4b04:	01c00044 	movi	r7,1
    4b08:	d9800804 	addi	r6,sp,32
    4b0c:	880b883a 	mov	r5,r17
    4b10:	a009883a 	mov	r4,r20
    4b14:	103ee83a 	callr	r2
    4b18:	10002a1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4b1c:	84000044 	addi	r16,r16,1
    4b20:	003fe706 	br	4ac0 <___vfprintf_internal_r+0x32c>
    4b24:	b5bfffc4 	addi	r22,r22,-1
    4b28:	b0800003 	ldbu	r2,0(r22)
    4b2c:	01c00044 	movi	r7,1
    4b30:	d9800804 	addi	r6,sp,32
    4b34:	d8800805 	stb	r2,32(sp)
    4b38:	88800117 	ldw	r2,4(r17)
    4b3c:	880b883a 	mov	r5,r17
    4b40:	a009883a 	mov	r4,r20
    4b44:	103ee83a 	callr	r2
    4b48:	10001e1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4b4c:	8585c83a 	sub	r2,r16,r22
    4b50:	b5c9883a 	add	r4,r22,r23
    4b54:	e085883a 	add	r2,fp,r2
    4b58:	013ff216 	blt	zero,r4,4b24 <___vfprintf_internal_r+0x390>
    4b5c:	1021883a 	mov	r16,r2
    4b60:	dd800d17 	ldw	r22,52(sp)
    4b64:	00004406 	br	4c78 <___vfprintf_internal_r+0x4e4>
    4b68:	00800044 	movi	r2,1
    4b6c:	1480080e 	bge	r2,r18,4b90 <___vfprintf_internal_r+0x3fc>
    4b70:	95ffffc4 	addi	r23,r18,-1
    4b74:	b80f883a 	mov	r7,r23
    4b78:	01800804 	movi	r6,32
    4b7c:	880b883a 	mov	r5,r17
    4b80:	a009883a 	mov	r4,r20
    4b84:	00047280 	call	4728 <print_repeat>
    4b88:	10000e1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4b8c:	85e1883a 	add	r16,r16,r23
    4b90:	b0800017 	ldw	r2,0(r22)
    4b94:	01c00044 	movi	r7,1
    4b98:	d80d883a 	mov	r6,sp
    4b9c:	d8800005 	stb	r2,0(sp)
    4ba0:	88800117 	ldw	r2,4(r17)
    4ba4:	880b883a 	mov	r5,r17
    4ba8:	a009883a 	mov	r4,r20
    4bac:	b5c00104 	addi	r23,r22,4
    4bb0:	103ee83a 	callr	r2
    4bb4:	1000031e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4bb8:	84000044 	addi	r16,r16,1
    4bbc:	b82d883a 	mov	r22,r23
    4bc0:	00002d06 	br	4c78 <___vfprintf_internal_r+0x4e4>
    4bc4:	00bfffc4 	movi	r2,-1
    4bc8:	00003106 	br	4c90 <___vfprintf_internal_r+0x4fc>
    4bcc:	b5c00017 	ldw	r23,0(r22)
    4bd0:	b7000104 	addi	fp,r22,4
    4bd4:	b809883a 	mov	r4,r23
    4bd8:	0004d940 	call	4d94 <strlen>
    4bdc:	9091c83a 	sub	r8,r18,r2
    4be0:	102d883a 	mov	r22,r2
    4be4:	0200090e 	bge	zero,r8,4c0c <___vfprintf_internal_r+0x478>
    4be8:	400f883a 	mov	r7,r8
    4bec:	01800804 	movi	r6,32
    4bf0:	880b883a 	mov	r5,r17
    4bf4:	a009883a 	mov	r4,r20
    4bf8:	da001015 	stw	r8,64(sp)
    4bfc:	00047280 	call	4728 <print_repeat>
    4c00:	da001017 	ldw	r8,64(sp)
    4c04:	103fef1e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4c08:	8221883a 	add	r16,r16,r8
    4c0c:	88800117 	ldw	r2,4(r17)
    4c10:	b00f883a 	mov	r7,r22
    4c14:	b80d883a 	mov	r6,r23
    4c18:	880b883a 	mov	r5,r17
    4c1c:	a009883a 	mov	r4,r20
    4c20:	103ee83a 	callr	r2
    4c24:	103fe71e 	bne	r2,zero,4bc4 <___vfprintf_internal_r+0x430>
    4c28:	85a1883a 	add	r16,r16,r22
    4c2c:	e02d883a 	mov	r22,fp
    4c30:	00001106 	br	4c78 <___vfprintf_internal_r+0x4e4>
    4c34:	00c00044 	movi	r3,1
    4c38:	04ffffc4 	movi	r19,-1
    4c3c:	d8000e15 	stw	zero,56(sp)
    4c40:	d8c00a15 	stw	r3,40(sp)
    4c44:	05400284 	movi	r21,10
    4c48:	9825883a 	mov	r18,r19
    4c4c:	d8000c15 	stw	zero,48(sp)
    4c50:	d8000b15 	stw	zero,44(sp)
    4c54:	182f883a 	mov	r23,r3
    4c58:	00000806 	br	4c7c <___vfprintf_internal_r+0x4e8>
    4c5c:	ddc00b15 	stw	r23,44(sp)
    4c60:	05c00084 	movi	r23,2
    4c64:	00000506 	br	4c7c <___vfprintf_internal_r+0x4e8>
    4c68:	00c00044 	movi	r3,1
    4c6c:	d8c00c15 	stw	r3,48(sp)
    4c70:	05c000c4 	movi	r23,3
    4c74:	00000106 	br	4c7c <___vfprintf_internal_r+0x4e8>
    4c78:	002f883a 	mov	r23,zero
    4c7c:	d8c00f17 	ldw	r3,60(sp)
    4c80:	18c00044 	addi	r3,r3,1
    4c84:	d8c00f15 	stw	r3,60(sp)
    4c88:	003edc06 	br	47fc <___vfprintf_internal_r+0x68>
    4c8c:	8005883a 	mov	r2,r16
    4c90:	dfc01a17 	ldw	ra,104(sp)
    4c94:	df001917 	ldw	fp,100(sp)
    4c98:	ddc01817 	ldw	r23,96(sp)
    4c9c:	dd801717 	ldw	r22,92(sp)
    4ca0:	dd401617 	ldw	r21,88(sp)
    4ca4:	dd001517 	ldw	r20,84(sp)
    4ca8:	dcc01417 	ldw	r19,80(sp)
    4cac:	dc801317 	ldw	r18,76(sp)
    4cb0:	dc401217 	ldw	r17,72(sp)
    4cb4:	dc001117 	ldw	r16,68(sp)
    4cb8:	dec01b04 	addi	sp,sp,108
    4cbc:	f800283a 	ret

00004cc0 <__vfprintf_internal>:
    4cc0:	00800034 	movhi	r2,0
    4cc4:	10947a04 	addi	r2,r2,20968
    4cc8:	300f883a 	mov	r7,r6
    4ccc:	280d883a 	mov	r6,r5
    4cd0:	200b883a 	mov	r5,r4
    4cd4:	11000017 	ldw	r4,0(r2)
    4cd8:	00047941 	jmpi	4794 <___vfprintf_internal_r>

00004cdc <__sfvwrite_small_dev>:
    4cdc:	2880000b 	ldhu	r2,0(r5)
    4ce0:	1080020c 	andi	r2,r2,8
    4ce4:	10002126 	beq	r2,zero,4d6c <__sfvwrite_small_dev+0x90>
    4ce8:	2880008f 	ldh	r2,2(r5)
    4cec:	defffa04 	addi	sp,sp,-24
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	dfc00515 	stw	ra,20(sp)
    4cf8:	dd000415 	stw	r20,16(sp)
    4cfc:	dcc00315 	stw	r19,12(sp)
    4d00:	dc800215 	stw	r18,8(sp)
    4d04:	dc400115 	stw	r17,4(sp)
    4d08:	2821883a 	mov	r16,r5
    4d0c:	10001216 	blt	r2,zero,4d58 <__sfvwrite_small_dev+0x7c>
    4d10:	2027883a 	mov	r19,r4
    4d14:	3025883a 	mov	r18,r6
    4d18:	3823883a 	mov	r17,r7
    4d1c:	05010004 	movi	r20,1024
    4d20:	04400b0e 	bge	zero,r17,4d50 <__sfvwrite_small_dev+0x74>
    4d24:	880f883a 	mov	r7,r17
    4d28:	a440010e 	bge	r20,r17,4d30 <__sfvwrite_small_dev+0x54>
    4d2c:	01c10004 	movi	r7,1024
    4d30:	8140008f 	ldh	r5,2(r16)
    4d34:	900d883a 	mov	r6,r18
    4d38:	9809883a 	mov	r4,r19
    4d3c:	0004db00 	call	4db0 <_write_r>
    4d40:	0080050e 	bge	zero,r2,4d58 <__sfvwrite_small_dev+0x7c>
    4d44:	88a3c83a 	sub	r17,r17,r2
    4d48:	90a5883a 	add	r18,r18,r2
    4d4c:	003ff406 	br	4d20 <__sfvwrite_small_dev+0x44>
    4d50:	0005883a 	mov	r2,zero
    4d54:	00000706 	br	4d74 <__sfvwrite_small_dev+0x98>
    4d58:	8080000b 	ldhu	r2,0(r16)
    4d5c:	10801014 	ori	r2,r2,64
    4d60:	8080000d 	sth	r2,0(r16)
    4d64:	00bfffc4 	movi	r2,-1
    4d68:	00000206 	br	4d74 <__sfvwrite_small_dev+0x98>
    4d6c:	00bfffc4 	movi	r2,-1
    4d70:	f800283a 	ret
    4d74:	dfc00517 	ldw	ra,20(sp)
    4d78:	dd000417 	ldw	r20,16(sp)
    4d7c:	dcc00317 	ldw	r19,12(sp)
    4d80:	dc800217 	ldw	r18,8(sp)
    4d84:	dc400117 	ldw	r17,4(sp)
    4d88:	dc000017 	ldw	r16,0(sp)
    4d8c:	dec00604 	addi	sp,sp,24
    4d90:	f800283a 	ret

00004d94 <strlen>:
    4d94:	2005883a 	mov	r2,r4
    4d98:	10c00007 	ldb	r3,0(r2)
    4d9c:	18000226 	beq	r3,zero,4da8 <strlen+0x14>
    4da0:	10800044 	addi	r2,r2,1
    4da4:	003ffc06 	br	4d98 <strlen+0x4>
    4da8:	1105c83a 	sub	r2,r2,r4
    4dac:	f800283a 	ret

00004db0 <_write_r>:
    4db0:	defffd04 	addi	sp,sp,-12
    4db4:	dc000015 	stw	r16,0(sp)
    4db8:	04000034 	movhi	r16,0
    4dbc:	dc400115 	stw	r17,4(sp)
    4dc0:	8414ba04 	addi	r16,r16,21224
    4dc4:	2023883a 	mov	r17,r4
    4dc8:	2809883a 	mov	r4,r5
    4dcc:	300b883a 	mov	r5,r6
    4dd0:	380d883a 	mov	r6,r7
    4dd4:	dfc00215 	stw	ra,8(sp)
    4dd8:	80000015 	stw	zero,0(r16)
    4ddc:	0004fd40 	call	4fd4 <write>
    4de0:	00ffffc4 	movi	r3,-1
    4de4:	10c0031e 	bne	r2,r3,4df4 <_write_r+0x44>
    4de8:	80c00017 	ldw	r3,0(r16)
    4dec:	18000126 	beq	r3,zero,4df4 <_write_r+0x44>
    4df0:	88c00015 	stw	r3,0(r17)
    4df4:	dfc00217 	ldw	ra,8(sp)
    4df8:	dc400117 	ldw	r17,4(sp)
    4dfc:	dc000017 	ldw	r16,0(sp)
    4e00:	dec00304 	addi	sp,sp,12
    4e04:	f800283a 	ret

00004e08 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4e08:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4e0c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4e10:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4e14:	dc000015 	stw	r16,0(sp)
    4e18:	dfc00115 	stw	ra,4(sp)
    4e1c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4e20:	00045bc0 	call	45bc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4e24:	10001026 	beq	r2,zero,4e68 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4e28:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4e2c:	013999b4 	movhi	r4,58982
    4e30:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4e34:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4e38:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4e3c:	297fffc4 	addi	r5,r5,-1
    4e40:	283ffe1e 	bne	r5,zero,4e3c <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4e44:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4e48:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4e4c:	18bffb16 	blt	r3,r2,4e3c <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4e50:	01400144 	movi	r5,5
    4e54:	8009883a 	mov	r4,r16
    4e58:	00046780 	call	4678 <__mulsi3>
    4e5c:	10bfffc4 	addi	r2,r2,-1
    4e60:	103ffe1e 	bne	r2,zero,4e5c <alt_busy_sleep+0x54>
    4e64:	00000506 	br	4e7c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4e68:	01400144 	movi	r5,5
    4e6c:	8009883a 	mov	r4,r16
    4e70:	00046780 	call	4678 <__mulsi3>
    4e74:	10bfffc4 	addi	r2,r2,-1
    4e78:	00bffe16 	blt	zero,r2,4e74 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    4e7c:	0005883a 	mov	r2,zero
    4e80:	dfc00117 	ldw	ra,4(sp)
    4e84:	dc000017 	ldw	r16,0(sp)
    4e88:	dec00204 	addi	sp,sp,8
    4e8c:	f800283a 	ret

00004e90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4e90:	deffff04 	addi	sp,sp,-4
    4e94:	01000034 	movhi	r4,0
    4e98:	01400034 	movhi	r5,0
    4e9c:	dfc00015 	stw	ra,0(sp)
    4ea0:	21144004 	addi	r4,r4,20736
    4ea4:	29547d04 	addi	r5,r5,20980

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4ea8:	2140061e 	bne	r4,r5,4ec4 <alt_load+0x34>
    4eac:	01000034 	movhi	r4,0
    4eb0:	01400034 	movhi	r5,0
    4eb4:	21100804 	addi	r4,r4,16416
    4eb8:	29500804 	addi	r5,r5,16416
    4ebc:	2140121e 	bne	r4,r5,4f08 <alt_load+0x78>
    4ec0:	00000b06 	br	4ef0 <alt_load+0x60>
    4ec4:	00c00034 	movhi	r3,0
    4ec8:	18d47d04 	addi	r3,r3,20980
    4ecc:	1907c83a 	sub	r3,r3,r4
    4ed0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4ed4:	10fff526 	beq	r2,r3,4eac <alt_load+0x1c>
    {
      *to++ = *from++;
    4ed8:	114f883a 	add	r7,r2,r5
    4edc:	39c00017 	ldw	r7,0(r7)
    4ee0:	110d883a 	add	r6,r2,r4
    4ee4:	10800104 	addi	r2,r2,4
    4ee8:	31c00015 	stw	r7,0(r6)
    4eec:	003ff906 	br	4ed4 <alt_load+0x44>
    4ef0:	01000034 	movhi	r4,0
    4ef4:	01400034 	movhi	r5,0
    4ef8:	21142704 	addi	r4,r4,20636
    4efc:	29542704 	addi	r5,r5,20636

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4f00:	2140101e 	bne	r4,r5,4f44 <alt_load+0xb4>
    4f04:	00000b06 	br	4f34 <alt_load+0xa4>
    4f08:	00c00034 	movhi	r3,0
    4f0c:	18d00804 	addi	r3,r3,16416
    4f10:	1907c83a 	sub	r3,r3,r4
    4f14:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4f18:	10fff526 	beq	r2,r3,4ef0 <alt_load+0x60>
    {
      *to++ = *from++;
    4f1c:	114f883a 	add	r7,r2,r5
    4f20:	39c00017 	ldw	r7,0(r7)
    4f24:	110d883a 	add	r6,r2,r4
    4f28:	10800104 	addi	r2,r2,4
    4f2c:	31c00015 	stw	r7,0(r6)
    4f30:	003ff906 	br	4f18 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4f34:	000508c0 	call	508c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4f38:	dfc00017 	ldw	ra,0(sp)
    4f3c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4f40:	00050901 	jmpi	5090 <alt_icache_flush_all>
    4f44:	00c00034 	movhi	r3,0
    4f48:	18d44004 	addi	r3,r3,20736
    4f4c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4f50:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4f54:	18bff726 	beq	r3,r2,4f34 <alt_load+0xa4>
    {
      *to++ = *from++;
    4f58:	114f883a 	add	r7,r2,r5
    4f5c:	39c00017 	ldw	r7,0(r7)
    4f60:	110d883a 	add	r6,r2,r4
    4f64:	10800104 	addi	r2,r2,4
    4f68:	31c00015 	stw	r7,0(r6)
    4f6c:	003ff906 	br	4f54 <alt_load+0xc4>

00004f70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4f70:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4f74:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4f78:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4f7c:	00050340 	call	5034 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4f80:	00050540 	call	5054 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4f84:	d1a04317 	ldw	r6,-32500(gp)
    4f88:	d1604417 	ldw	r5,-32496(gp)
    4f8c:	d1204517 	ldw	r4,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4f90:	dfc00017 	ldw	ra,0(sp)
    4f94:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4f98:	000440c1 	jmpi	440c <main>

00004f9c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4f9c:	defffe04 	addi	sp,sp,-8
    4fa0:	dc000015 	stw	r16,0(sp)
    4fa4:	dfc00115 	stw	ra,4(sp)
    4fa8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4fac:	0004d940 	call	4d94 <strlen>
    4fb0:	01000034 	movhi	r4,0
    4fb4:	000f883a 	mov	r7,zero
    4fb8:	100d883a 	mov	r6,r2
    4fbc:	800b883a 	mov	r5,r16
    4fc0:	21147b04 	addi	r4,r4,20972
#else
    return fputs(str, stdout);
#endif
#endif
}
    4fc4:	dfc00117 	ldw	ra,4(sp)
    4fc8:	dc000017 	ldw	r16,0(sp)
    4fcc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4fd0:	00050581 	jmpi	5058 <altera_avalon_jtag_uart_write>

00004fd4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4fd4:	00800044 	movi	r2,1
    4fd8:	20800226 	beq	r4,r2,4fe4 <write+0x10>
    4fdc:	00800084 	movi	r2,2
    4fe0:	2080041e 	bne	r4,r2,4ff4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4fe4:	01000034 	movhi	r4,0
    4fe8:	000f883a 	mov	r7,zero
    4fec:	21147b04 	addi	r4,r4,20972
    4ff0:	00050581 	jmpi	5058 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4ff4:	d0a00417 	ldw	r2,-32752(gp)
    4ff8:	10000926 	beq	r2,zero,5020 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4ffc:	deffff04 	addi	sp,sp,-4
    5000:	dfc00015 	stw	ra,0(sp)
    5004:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5008:	00c01444 	movi	r3,81
    500c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5010:	00bfffc4 	movi	r2,-1
    5014:	dfc00017 	ldw	ra,0(sp)
    5018:	dec00104 	addi	sp,sp,4
    501c:	f800283a 	ret
    5020:	d0a04204 	addi	r2,gp,-32504
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5024:	00c01444 	movi	r3,81
    5028:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    502c:	00bfffc4 	movi	r2,-1
    5030:	f800283a 	ret

00005034 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5034:	deffff04 	addi	sp,sp,-4
    5038:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
    503c:	00050940 	call	5094 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5040:	00800044 	movi	r2,1
    5044:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5048:	dfc00017 	ldw	ra,0(sp)
    504c:	dec00104 	addi	sp,sp,4
    5050:	f800283a 	ret

00005054 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5054:	f800283a 	ret

00005058 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    5058:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    505c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    5060:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5064:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5068:	2980072e 	bgeu	r5,r6,5088 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    506c:	38c00037 	ldwio	r3,0(r7)
    5070:	18ffffec 	andhi	r3,r3,65535
    5074:	183ffc26 	beq	r3,zero,5068 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5078:	28c00007 	ldb	r3,0(r5)
    507c:	20c00035 	stwio	r3,0(r4)
    5080:	29400044 	addi	r5,r5,1
    5084:	003ff806 	br	5068 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    5088:	f800283a 	ret

0000508c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    508c:	f800283a 	ret

00005090 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5090:	f800283a 	ret

00005094 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5094:	000170fa 	wrctl	ienable,zero
    5098:	f800283a 	ret
